Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
Rule 2     dec_vars -> VAR vars SEMICOLON
Rule 3     dec_vars -> empty
Rule 4     vars -> vars_simple
Rule 5     vars -> vars_complex
Rule 6     vars_simple -> type_simple vars_simple_dec
Rule 7     vars_simple_dec -> vars_simple_id vars_simple_more
Rule 8     vars_simple_more -> COMMA vars_simple_dec
Rule 9     vars_simple_more -> empty
Rule 10    vars_simple_id -> ID vars_simple_arr
Rule 11    vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2
Rule 12    vars_simple_arr -> empty
Rule 13    vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY
Rule 14    vars_simple_arr2 -> empty
Rule 15    vars_complex -> type_complex vars_complex_dec
Rule 16    vars_complex_dec -> ID vars_complex_more
Rule 17    vars_complex_more -> COMMA vars_complex_dec
Rule 18    vars_complex_more -> empty
Rule 19    type_simple -> INT
Rule 20    type_simple -> FLOAT
Rule 21    type_simple -> CHAR
Rule 22    type_complex -> FILE
Rule 23    type_complex -> ID
Rule 24    dec_fun -> fun
Rule 25    dec_fun -> empty
Rule 26    fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
Rule 27    param_pos -> param
Rule 28    param_pos -> empty
Rule 29    param -> type_simple ID param_more
Rule 30    param_more -> COMMA param
Rule 31    param_more -> empty
Rule 32    fun_type -> type_simple
Rule 33    fun_type -> VOID
Rule 34    dec_block -> block
Rule 35    dec_block -> empty
Rule 36    block -> statement block_more
Rule 37    block_more -> block
Rule 38    block_more -> empty
Rule 39    statement -> dec_assign
Rule 40    statement -> dec_call
Rule 41    statement -> dec_read
Rule 42    statement -> dec_write
Rule 43    statement -> dec_condition
Rule 44    statement -> dec_cycle
Rule 45    statement -> dec_method
Rule 46    dec_exp -> dec_exp_s
Rule 47    dec_exp_s -> dec_term pm_op
Rule 48    pm_op -> PLUS dec_exp_s
Rule 49    pm_op -> MINUS dec_exp_s
Rule 50    pm_op -> empty
Rule 51    dec_exp_method -> dec_exp_s
Rule 52    dec_exp_method -> empty
Rule 53    dec_term -> dec_fact md_op
Rule 54    md_op -> TIMES dec_term
Rule 55    md_op -> DIVIDE dec_term
Rule 56    md_op -> empty
Rule 57    dec_fact -> var_cte
Rule 58    dec_fact -> LEFTPAREN h_exp RIGHTPAREN
Rule 59    h_exp -> s_exp ao_op
Rule 60    ao_op -> COMP_AND h_exp
Rule 61    ao_op -> COMP_OR h_exp
Rule 62    ao_op -> empty
Rule 63    s_exp -> dec_exp_s comp_op
Rule 64    comp_op -> COMP_LESS s_exp
Rule 65    comp_op -> COMP_GREATER s_exp
Rule 66    comp_op -> COMP_EQUAL s_exp
Rule 67    comp_op -> COMP_NOTEQUAL s_exp
Rule 68    comp_op -> empty
Rule 69    dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
Rule 70    dec_class -> empty
Rule 71    dec_inherit -> COLON INHERIT ID
Rule 72    dec_inherit -> empty
Rule 73    dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON
Rule 74    dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON
Rule 75    call_pos -> call
Rule 76    call_pos -> empty
Rule 77    call -> dec_exp call_more
Rule 78    call_more -> COMMA call
Rule 79    call_more -> empty
Rule 80    dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
Rule 81    dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
Rule 82    write -> dec_exp write_more
Rule 83    write -> var_cte write_more
Rule 84    write_more -> COMMA write
Rule 85    write_more -> empty
Rule 86    dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
Rule 87    dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET
Rule 88    dec_else -> empty
Rule 89    dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
Rule 90    dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
Rule 91    var_cte -> var_id
Rule 92    var_cte -> CTEI
Rule 93    var_cte -> CTEF
Rule 94    var_cte -> SIGN
Rule 95    var_id -> ID
Rule 96    fun_id -> ID
Rule 97    empty -> <empty>

Terminals, with rules where they appear

CHAR                 : 21
CLASS                : 69
COLON                : 69 69 71
COMMA                : 8 17 30 78 84
COMP_AND             : 60
COMP_EQUAL           : 66 73
COMP_GREATER         : 65
COMP_LESS            : 64
COMP_NOTEQUAL        : 67
COMP_OR              : 61
CTEF                 : 93
CTEI                 : 11 13 92
DIVIDE               : 55
DOT                  : 90
ELSE                 : 87
FILE                 : 22
FLOAT                : 20
FUN                  : 26
ID                   : 1 10 16 23 26 29 69 71 80 90 90 95 96
IF                   : 86
INCO                 : 80
INHERIT              : 71
INT                  : 19
LEFTBRACKET          : 1 26 69 86 87 89
LEFTKEY              : 11 13
LEFTPAREN            : 1 26 58 74 80 81 86 89 90
MAIN                 : 1
MINUS                : 49
OUTCO                : 81
PLUS                 : 48
PRIVATE              : 69
PROGRAM              : 1
PUBLIC               : 69
RETURN               : 26
RIGHTBRACKET         : 1 26 69 86 87 89
RIGHTKEY             : 11 13
RIGHTPAREN           : 1 26 58 74 80 81 86 89 90
SEMICOLON            : 1 2 26 69 73 74 80 81 90
SIGN                 : 94
TIMES                : 54
VAR                  : 2
VOID                 : 33
WHILE                : 89
error                : 

Nonterminals, with rules where they appear

ao_op                : 59
block                : 34 37
block_more           : 36
call                 : 75 78
call_more            : 77
call_pos             : 74
comp_op              : 63
dec_assign           : 39
dec_block            : 1 26 86 87 89
dec_call             : 40
dec_class            : 1
dec_condition        : 43
dec_cycle            : 44
dec_else             : 86
dec_exp              : 73 77 82 86 89
dec_exp_method       : 26 90
dec_exp_s            : 46 48 49 51 63
dec_fact             : 53
dec_fun              : 1 69 69
dec_inherit          : 69
dec_method           : 45
dec_read             : 41
dec_term             : 47 54 55
dec_vars             : 1 1 69 69
dec_write            : 42
empty                : 3 9 12 14 18 25 28 31 35 38 50 52 56 62 68 70 72 76 79 85 88
fun                  : 24
fun_id               : 74
fun_type             : 26
h_exp                : 58 60 61
md_op                : 53
param                : 27 30
param_more           : 29
param_pos            : 26
pm_op                : 47
program              : 0
s_exp                : 59 64 65 66 67
statement            : 36
type_complex         : 15
type_simple          : 6 29 32
var_cte              : 57 83
var_id               : 73 91
vars                 : 2
vars_complex         : 5
vars_complex_dec     : 15 17
vars_complex_more    : 16
vars_simple          : 4
vars_simple_arr      : 10
vars_simple_arr2     : 11
vars_simple_dec      : 6 8
vars_simple_id       : 7
vars_simple_more     : 7
write                : 81 84
write_more           : 82 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (97) empty -> .

    VAR             shift and go to state 6
    FUN             reduce using rule 97 (empty -> .)
    CLASS           reduce using rule 97 (empty -> .)
    MAIN            reduce using rule 97 (empty -> .)

    dec_vars                       shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON dec_vars . dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
    (24) dec_fun -> . fun
    (25) dec_fun -> . empty
    (26) fun -> . FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (97) empty -> .

    FUN             shift and go to state 11
    CLASS           reduce using rule 97 (empty -> .)
    MAIN            reduce using rule 97 (empty -> .)

    dec_fun                        shift and go to state 8
    fun                            shift and go to state 9
    empty                          shift and go to state 10

state 6

    (2) dec_vars -> VAR . vars SEMICOLON
    (4) vars -> . vars_simple
    (5) vars -> . vars_complex
    (6) vars_simple -> . type_simple vars_simple_dec
    (15) vars_complex -> . type_complex vars_complex_dec
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR
    (22) type_complex -> . FILE
    (23) type_complex -> . ID

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    FILE            shift and go to state 20
    ID              shift and go to state 21

    vars                           shift and go to state 12
    vars_simple                    shift and go to state 13
    vars_complex                   shift and go to state 14
    type_simple                    shift and go to state 15
    type_complex                   shift and go to state 16

state 7

    (3) dec_vars -> empty .

    FUN             reduce using rule 3 (dec_vars -> empty .)
    CLASS           reduce using rule 3 (dec_vars -> empty .)
    MAIN            reduce using rule 3 (dec_vars -> empty .)
    INCO            reduce using rule 3 (dec_vars -> empty .)
    OUTCO           reduce using rule 3 (dec_vars -> empty .)
    IF              reduce using rule 3 (dec_vars -> empty .)
    WHILE           reduce using rule 3 (dec_vars -> empty .)
    ID              reduce using rule 3 (dec_vars -> empty .)
    RIGHTBRACKET    reduce using rule 3 (dec_vars -> empty .)
    PUBLIC          reduce using rule 3 (dec_vars -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun . dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
    (69) dec_class -> . CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (70) dec_class -> . empty
    (97) empty -> .

    CLASS           shift and go to state 23
    MAIN            reduce using rule 97 (empty -> .)

    dec_class                      shift and go to state 22
    empty                          shift and go to state 24

state 9

    (24) dec_fun -> fun .

    CLASS           reduce using rule 24 (dec_fun -> fun .)
    MAIN            reduce using rule 24 (dec_fun -> fun .)
    PUBLIC          reduce using rule 24 (dec_fun -> fun .)
    RIGHTBRACKET    reduce using rule 24 (dec_fun -> fun .)


state 10

    (25) dec_fun -> empty .

    CLASS           reduce using rule 25 (dec_fun -> empty .)
    MAIN            reduce using rule 25 (dec_fun -> empty .)
    PUBLIC          reduce using rule 25 (dec_fun -> empty .)
    RIGHTBRACKET    reduce using rule 25 (dec_fun -> empty .)


state 11

    (26) fun -> FUN . fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (32) fun_type -> . type_simple
    (33) fun_type -> . VOID
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR

    VOID            shift and go to state 27
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    fun_type                       shift and go to state 25
    type_simple                    shift and go to state 26

state 12

    (2) dec_vars -> VAR vars . SEMICOLON

    SEMICOLON       shift and go to state 28


state 13

    (4) vars -> vars_simple .

    SEMICOLON       reduce using rule 4 (vars -> vars_simple .)


state 14

    (5) vars -> vars_complex .

    SEMICOLON       reduce using rule 5 (vars -> vars_complex .)


state 15

    (6) vars_simple -> type_simple . vars_simple_dec
    (7) vars_simple_dec -> . vars_simple_id vars_simple_more
    (10) vars_simple_id -> . ID vars_simple_arr

    ID              shift and go to state 31

    vars_simple_dec                shift and go to state 29
    vars_simple_id                 shift and go to state 30

state 16

    (15) vars_complex -> type_complex . vars_complex_dec
    (16) vars_complex_dec -> . ID vars_complex_more

    ID              shift and go to state 33

    vars_complex_dec               shift and go to state 32

state 17

    (19) type_simple -> INT .

    ID              reduce using rule 19 (type_simple -> INT .)


state 18

    (20) type_simple -> FLOAT .

    ID              reduce using rule 20 (type_simple -> FLOAT .)


state 19

    (21) type_simple -> CHAR .

    ID              reduce using rule 21 (type_simple -> CHAR .)


state 20

    (22) type_complex -> FILE .

    ID              reduce using rule 22 (type_complex -> FILE .)


state 21

    (23) type_complex -> ID .

    ID              reduce using rule 23 (type_complex -> ID .)


state 22

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class . MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    MAIN            shift and go to state 34


state 23

    (69) dec_class -> CLASS . ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    ID              shift and go to state 35


state 24

    (70) dec_class -> empty .

    MAIN            reduce using rule 70 (dec_class -> empty .)


state 25

    (26) fun -> FUN fun_type . ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    ID              shift and go to state 36


state 26

    (32) fun_type -> type_simple .

    ID              reduce using rule 32 (fun_type -> type_simple .)


state 27

    (33) fun_type -> VOID .

    ID              reduce using rule 33 (fun_type -> VOID .)


state 28

    (2) dec_vars -> VAR vars SEMICOLON .

    FUN             reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    CLASS           reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    MAIN            reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    INCO            reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    OUTCO           reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    IF              reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    WHILE           reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    ID              reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    RIGHTBRACKET    reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    PUBLIC          reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)


state 29

    (6) vars_simple -> type_simple vars_simple_dec .

    SEMICOLON       reduce using rule 6 (vars_simple -> type_simple vars_simple_dec .)


state 30

    (7) vars_simple_dec -> vars_simple_id . vars_simple_more
    (8) vars_simple_more -> . COMMA vars_simple_dec
    (9) vars_simple_more -> . empty
    (97) empty -> .

    COMMA           shift and go to state 38
    SEMICOLON       reduce using rule 97 (empty -> .)

    vars_simple_more               shift and go to state 37
    empty                          shift and go to state 39

state 31

    (10) vars_simple_id -> ID . vars_simple_arr
    (11) vars_simple_arr -> . LEFTKEY CTEI RIGHTKEY vars_simple_arr2
    (12) vars_simple_arr -> . empty
    (97) empty -> .

    LEFTKEY         shift and go to state 41
    COMMA           reduce using rule 97 (empty -> .)
    SEMICOLON       reduce using rule 97 (empty -> .)

    vars_simple_arr                shift and go to state 40
    empty                          shift and go to state 42

state 32

    (15) vars_complex -> type_complex vars_complex_dec .

    SEMICOLON       reduce using rule 15 (vars_complex -> type_complex vars_complex_dec .)


state 33

    (16) vars_complex_dec -> ID . vars_complex_more
    (17) vars_complex_more -> . COMMA vars_complex_dec
    (18) vars_complex_more -> . empty
    (97) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 97 (empty -> .)

    vars_complex_more              shift and go to state 43
    empty                          shift and go to state 45

state 34

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN . LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    LEFTPAREN       shift and go to state 46


state 35

    (69) dec_class -> CLASS ID . dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (71) dec_inherit -> . COLON INHERIT ID
    (72) dec_inherit -> . empty
    (97) empty -> .

    COLON           shift and go to state 48
    LEFTBRACKET     reduce using rule 97 (empty -> .)

    dec_inherit                    shift and go to state 47
    empty                          shift and go to state 49

state 36

    (26) fun -> FUN fun_type ID . LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    LEFTPAREN       shift and go to state 50


state 37

    (7) vars_simple_dec -> vars_simple_id vars_simple_more .

    SEMICOLON       reduce using rule 7 (vars_simple_dec -> vars_simple_id vars_simple_more .)


state 38

    (8) vars_simple_more -> COMMA . vars_simple_dec
    (7) vars_simple_dec -> . vars_simple_id vars_simple_more
    (10) vars_simple_id -> . ID vars_simple_arr

    ID              shift and go to state 31

    vars_simple_dec                shift and go to state 51
    vars_simple_id                 shift and go to state 30

state 39

    (9) vars_simple_more -> empty .

    SEMICOLON       reduce using rule 9 (vars_simple_more -> empty .)


state 40

    (10) vars_simple_id -> ID vars_simple_arr .

    COMMA           reduce using rule 10 (vars_simple_id -> ID vars_simple_arr .)
    SEMICOLON       reduce using rule 10 (vars_simple_id -> ID vars_simple_arr .)


state 41

    (11) vars_simple_arr -> LEFTKEY . CTEI RIGHTKEY vars_simple_arr2

    CTEI            shift and go to state 52


state 42

    (12) vars_simple_arr -> empty .

    COMMA           reduce using rule 12 (vars_simple_arr -> empty .)
    SEMICOLON       reduce using rule 12 (vars_simple_arr -> empty .)


state 43

    (16) vars_complex_dec -> ID vars_complex_more .

    SEMICOLON       reduce using rule 16 (vars_complex_dec -> ID vars_complex_more .)


state 44

    (17) vars_complex_more -> COMMA . vars_complex_dec
    (16) vars_complex_dec -> . ID vars_complex_more

    ID              shift and go to state 33

    vars_complex_dec               shift and go to state 53

state 45

    (18) vars_complex_more -> empty .

    SEMICOLON       reduce using rule 18 (vars_complex_more -> empty .)


state 46

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN . RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    RIGHTPAREN      shift and go to state 54


state 47

    (69) dec_class -> CLASS ID dec_inherit . LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    LEFTBRACKET     shift and go to state 55


state 48

    (71) dec_inherit -> COLON . INHERIT ID

    INHERIT         shift and go to state 56


state 49

    (72) dec_inherit -> empty .

    LEFTBRACKET     reduce using rule 72 (dec_inherit -> empty .)


state 50

    (26) fun -> FUN fun_type ID LEFTPAREN . param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (27) param_pos -> . param
    (28) param_pos -> . empty
    (29) param -> . type_simple ID param_more
    (97) empty -> .
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR

    RIGHTPAREN      reduce using rule 97 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    param_pos                      shift and go to state 57
    param                          shift and go to state 58
    empty                          shift and go to state 59
    type_simple                    shift and go to state 60

state 51

    (8) vars_simple_more -> COMMA vars_simple_dec .

    SEMICOLON       reduce using rule 8 (vars_simple_more -> COMMA vars_simple_dec .)


state 52

    (11) vars_simple_arr -> LEFTKEY CTEI . RIGHTKEY vars_simple_arr2

    RIGHTKEY        shift and go to state 61


state 53

    (17) vars_complex_more -> COMMA vars_complex_dec .

    SEMICOLON       reduce using rule 17 (vars_complex_more -> COMMA vars_complex_dec .)


state 54

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN . LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 62


state 55

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET . PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    PRIVATE         shift and go to state 63


state 56

    (71) dec_inherit -> COLON INHERIT . ID

    ID              shift and go to state 64


state 57

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos . RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    RIGHTPAREN      shift and go to state 65


state 58

    (27) param_pos -> param .

    RIGHTPAREN      reduce using rule 27 (param_pos -> param .)


state 59

    (28) param_pos -> empty .

    RIGHTPAREN      reduce using rule 28 (param_pos -> empty .)


state 60

    (29) param -> type_simple . ID param_more

    ID              shift and go to state 66


state 61

    (11) vars_simple_arr -> LEFTKEY CTEI RIGHTKEY . vars_simple_arr2
    (13) vars_simple_arr2 -> . LEFTKEY CTEI RIGHTKEY
    (14) vars_simple_arr2 -> . empty
    (97) empty -> .

    LEFTKEY         shift and go to state 67
    COMMA           reduce using rule 97 (empty -> .)
    SEMICOLON       reduce using rule 97 (empty -> .)

    vars_simple_arr2               shift and go to state 68
    empty                          shift and go to state 69

state 62

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET . dec_vars dec_block RIGHTBRACKET
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (97) empty -> .

    VAR             shift and go to state 6
    INCO            reduce using rule 97 (empty -> .)
    OUTCO           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    RIGHTBRACKET    reduce using rule 97 (empty -> .)

    dec_vars                       shift and go to state 70
    empty                          shift and go to state 7

state 63

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE . COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    COLON           shift and go to state 71


state 64

    (71) dec_inherit -> COLON INHERIT ID .

    LEFTBRACKET     reduce using rule 71 (dec_inherit -> COLON INHERIT ID .)


state 65

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN . LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    LEFTBRACKET     shift and go to state 72


state 66

    (29) param -> type_simple ID . param_more
    (30) param_more -> . COMMA param
    (31) param_more -> . empty
    (97) empty -> .

    COMMA           shift and go to state 74
    RIGHTPAREN      reduce using rule 97 (empty -> .)

    param_more                     shift and go to state 73
    empty                          shift and go to state 75

state 67

    (13) vars_simple_arr2 -> LEFTKEY . CTEI RIGHTKEY

    CTEI            shift and go to state 76


state 68

    (11) vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .

    COMMA           reduce using rule 11 (vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .)
    SEMICOLON       reduce using rule 11 (vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .)


state 69

    (14) vars_simple_arr2 -> empty .

    COMMA           reduce using rule 14 (vars_simple_arr2 -> empty .)
    SEMICOLON       reduce using rule 14 (vars_simple_arr2 -> empty .)


state 70

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars . dec_block RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (97) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (73) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (74) dec_call -> . fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (80) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (81) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (86) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (89) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (90) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (95) var_id -> . ID
    (96) fun_id -> . ID

    RIGHTBRACKET    reduce using rule 97 (empty -> .)
    INCO            shift and go to state 91
    OUTCO           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    ID              shift and go to state 77

    dec_block                      shift and go to state 78
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88
    var_id                         shift and go to state 89
    fun_id                         shift and go to state 90

state 71

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON . dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (97) empty -> .

    VAR             shift and go to state 6
    FUN             reduce using rule 97 (empty -> .)
    PUBLIC          reduce using rule 97 (empty -> .)

    dec_vars                       shift and go to state 95
    empty                          shift and go to state 7

state 72

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET . dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (97) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (73) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (74) dec_call -> . fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (80) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (81) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (86) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (89) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (90) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (95) var_id -> . ID
    (96) fun_id -> . ID

    RETURN          reduce using rule 97 (empty -> .)
    INCO            shift and go to state 91
    OUTCO           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    ID              shift and go to state 77

    dec_block                      shift and go to state 96
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88
    var_id                         shift and go to state 89
    fun_id                         shift and go to state 90

state 73

    (29) param -> type_simple ID param_more .

    RIGHTPAREN      reduce using rule 29 (param -> type_simple ID param_more .)


state 74

    (30) param_more -> COMMA . param
    (29) param -> . type_simple ID param_more
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    param                          shift and go to state 97
    type_simple                    shift and go to state 60

state 75

    (31) param_more -> empty .

    RIGHTPAREN      reduce using rule 31 (param_more -> empty .)


state 76

    (13) vars_simple_arr2 -> LEFTKEY CTEI . RIGHTKEY

    RIGHTKEY        shift and go to state 98


state 77

    (90) dec_method -> ID . DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (95) var_id -> ID .
    (96) fun_id -> ID .

    DOT             shift and go to state 99
    COMP_EQUAL      reduce using rule 95 (var_id -> ID .)
    LEFTPAREN       reduce using rule 96 (fun_id -> ID .)


state 78

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 100


state 79

    (34) dec_block -> block .

    RIGHTBRACKET    reduce using rule 34 (dec_block -> block .)
    RETURN          reduce using rule 34 (dec_block -> block .)


state 80

    (35) dec_block -> empty .

    RIGHTBRACKET    reduce using rule 35 (dec_block -> empty .)
    RETURN          reduce using rule 35 (dec_block -> empty .)


state 81

    (36) block -> statement . block_more
    (37) block_more -> . block
    (38) block_more -> . empty
    (36) block -> . statement block_more
    (97) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (73) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (74) dec_call -> . fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (80) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (81) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (86) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (89) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (90) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (95) var_id -> . ID
    (96) fun_id -> . ID

    RIGHTBRACKET    reduce using rule 97 (empty -> .)
    RETURN          reduce using rule 97 (empty -> .)
    INCO            shift and go to state 91
    OUTCO           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    ID              shift and go to state 77

    statement                      shift and go to state 81
    block_more                     shift and go to state 101
    block                          shift and go to state 102
    empty                          shift and go to state 103
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88
    var_id                         shift and go to state 89
    fun_id                         shift and go to state 90

state 82

    (39) statement -> dec_assign .

    INCO            reduce using rule 39 (statement -> dec_assign .)
    OUTCO           reduce using rule 39 (statement -> dec_assign .)
    IF              reduce using rule 39 (statement -> dec_assign .)
    WHILE           reduce using rule 39 (statement -> dec_assign .)
    ID              reduce using rule 39 (statement -> dec_assign .)
    RIGHTBRACKET    reduce using rule 39 (statement -> dec_assign .)
    RETURN          reduce using rule 39 (statement -> dec_assign .)


state 83

    (40) statement -> dec_call .

    INCO            reduce using rule 40 (statement -> dec_call .)
    OUTCO           reduce using rule 40 (statement -> dec_call .)
    IF              reduce using rule 40 (statement -> dec_call .)
    WHILE           reduce using rule 40 (statement -> dec_call .)
    ID              reduce using rule 40 (statement -> dec_call .)
    RIGHTBRACKET    reduce using rule 40 (statement -> dec_call .)
    RETURN          reduce using rule 40 (statement -> dec_call .)


state 84

    (41) statement -> dec_read .

    INCO            reduce using rule 41 (statement -> dec_read .)
    OUTCO           reduce using rule 41 (statement -> dec_read .)
    IF              reduce using rule 41 (statement -> dec_read .)
    WHILE           reduce using rule 41 (statement -> dec_read .)
    ID              reduce using rule 41 (statement -> dec_read .)
    RIGHTBRACKET    reduce using rule 41 (statement -> dec_read .)
    RETURN          reduce using rule 41 (statement -> dec_read .)


state 85

    (42) statement -> dec_write .

    INCO            reduce using rule 42 (statement -> dec_write .)
    OUTCO           reduce using rule 42 (statement -> dec_write .)
    IF              reduce using rule 42 (statement -> dec_write .)
    WHILE           reduce using rule 42 (statement -> dec_write .)
    ID              reduce using rule 42 (statement -> dec_write .)
    RIGHTBRACKET    reduce using rule 42 (statement -> dec_write .)
    RETURN          reduce using rule 42 (statement -> dec_write .)


state 86

    (43) statement -> dec_condition .

    INCO            reduce using rule 43 (statement -> dec_condition .)
    OUTCO           reduce using rule 43 (statement -> dec_condition .)
    IF              reduce using rule 43 (statement -> dec_condition .)
    WHILE           reduce using rule 43 (statement -> dec_condition .)
    ID              reduce using rule 43 (statement -> dec_condition .)
    RIGHTBRACKET    reduce using rule 43 (statement -> dec_condition .)
    RETURN          reduce using rule 43 (statement -> dec_condition .)


state 87

    (44) statement -> dec_cycle .

    INCO            reduce using rule 44 (statement -> dec_cycle .)
    OUTCO           reduce using rule 44 (statement -> dec_cycle .)
    IF              reduce using rule 44 (statement -> dec_cycle .)
    WHILE           reduce using rule 44 (statement -> dec_cycle .)
    ID              reduce using rule 44 (statement -> dec_cycle .)
    RIGHTBRACKET    reduce using rule 44 (statement -> dec_cycle .)
    RETURN          reduce using rule 44 (statement -> dec_cycle .)


state 88

    (45) statement -> dec_method .

    INCO            reduce using rule 45 (statement -> dec_method .)
    OUTCO           reduce using rule 45 (statement -> dec_method .)
    IF              reduce using rule 45 (statement -> dec_method .)
    WHILE           reduce using rule 45 (statement -> dec_method .)
    ID              reduce using rule 45 (statement -> dec_method .)
    RIGHTBRACKET    reduce using rule 45 (statement -> dec_method .)
    RETURN          reduce using rule 45 (statement -> dec_method .)


state 89

    (73) dec_assign -> var_id . COMP_EQUAL dec_exp SEMICOLON

    COMP_EQUAL      shift and go to state 104


state 90

    (74) dec_call -> fun_id . LEFTPAREN call_pos RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 105


state 91

    (80) dec_read -> INCO . LEFTPAREN ID RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 106


state 92

    (81) dec_write -> OUTCO . LEFTPAREN write RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 107


state 93

    (86) dec_condition -> IF . LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else

    LEFTPAREN       shift and go to state 108


state 94

    (89) dec_cycle -> WHILE . LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET

    LEFTPAREN       shift and go to state 109


state 95

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars . dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (24) dec_fun -> . fun
    (25) dec_fun -> . empty
    (26) fun -> . FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (97) empty -> .

    FUN             shift and go to state 11
    PUBLIC          reduce using rule 97 (empty -> .)

    dec_fun                        shift and go to state 110
    fun                            shift and go to state 9
    empty                          shift and go to state 10

state 96

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block . RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    RETURN          shift and go to state 111


state 97

    (30) param_more -> COMMA param .

    RIGHTPAREN      reduce using rule 30 (param_more -> COMMA param .)


state 98

    (13) vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .

    COMMA           reduce using rule 13 (vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .)
    SEMICOLON       reduce using rule 13 (vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .)


state 99

    (90) dec_method -> ID DOT . ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    ID              shift and go to state 112


state 100

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET .)


state 101

    (36) block -> statement block_more .

    RIGHTBRACKET    reduce using rule 36 (block -> statement block_more .)
    RETURN          reduce using rule 36 (block -> statement block_more .)


state 102

    (37) block_more -> block .

    RIGHTBRACKET    reduce using rule 37 (block_more -> block .)
    RETURN          reduce using rule 37 (block_more -> block .)


state 103

    (38) block_more -> empty .

    RIGHTBRACKET    reduce using rule 38 (block_more -> empty .)
    RETURN          reduce using rule 38 (block_more -> empty .)


state 104

    (73) dec_assign -> var_id COMP_EQUAL . dec_exp SEMICOLON
    (46) dec_exp -> . dec_exp_s
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    var_id                         shift and go to state 113
    dec_exp                        shift and go to state 114
    dec_exp_s                      shift and go to state 115
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118

state 105

    (74) dec_call -> fun_id LEFTPAREN . call_pos RIGHTPAREN SEMICOLON
    (75) call_pos -> . call
    (76) call_pos -> . empty
    (77) call -> . dec_exp call_more
    (97) empty -> .
    (46) dec_exp -> . dec_exp_s
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    RIGHTPAREN      reduce using rule 97 (empty -> .)
    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    call_pos                       shift and go to state 124
    call                           shift and go to state 125
    empty                          shift and go to state 126
    dec_exp                        shift and go to state 127
    dec_exp_s                      shift and go to state 115
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 106

    (80) dec_read -> INCO LEFTPAREN . ID RIGHTPAREN SEMICOLON

    ID              shift and go to state 128


state 107

    (81) dec_write -> OUTCO LEFTPAREN . write RIGHTPAREN SEMICOLON
    (82) write -> . dec_exp write_more
    (83) write -> . var_cte write_more
    (46) dec_exp -> . dec_exp_s
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (47) dec_exp_s -> . dec_term pm_op
    (95) var_id -> . ID
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123
    LEFTPAREN       shift and go to state 119

    write                          shift and go to state 129
    dec_exp                        shift and go to state 130
    var_cte                        shift and go to state 131
    dec_exp_s                      shift and go to state 115
    var_id                         shift and go to state 113
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117

state 108

    (86) dec_condition -> IF LEFTPAREN . dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (46) dec_exp -> . dec_exp_s
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_exp                        shift and go to state 132
    dec_exp_s                      shift and go to state 115
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 109

    (89) dec_cycle -> WHILE LEFTPAREN . dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (46) dec_exp -> . dec_exp_s
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_exp                        shift and go to state 133
    dec_exp_s                      shift and go to state 115
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 110

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun . PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    PUBLIC          shift and go to state 134


state 111

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN . dec_exp_method SEMICOLON RIGHTBRACKET
    (51) dec_exp_method -> . dec_exp_s
    (52) dec_exp_method -> . empty
    (47) dec_exp_s -> . dec_term pm_op
    (97) empty -> .
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    SEMICOLON       reduce using rule 97 (empty -> .)
    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_exp_method                 shift and go to state 135
    dec_exp_s                      shift and go to state 136
    empty                          shift and go to state 137
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 112

    (90) dec_method -> ID DOT ID . LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 138


state 113

    (91) var_cte -> var_id .

    TIMES           reduce using rule 91 (var_cte -> var_id .)
    DIVIDE          reduce using rule 91 (var_cte -> var_id .)
    PLUS            reduce using rule 91 (var_cte -> var_id .)
    MINUS           reduce using rule 91 (var_cte -> var_id .)
    SEMICOLON       reduce using rule 91 (var_cte -> var_id .)
    COMMA           reduce using rule 91 (var_cte -> var_id .)
    RIGHTPAREN      reduce using rule 91 (var_cte -> var_id .)
    COMP_LESS       reduce using rule 91 (var_cte -> var_id .)
    COMP_GREATER    reduce using rule 91 (var_cte -> var_id .)
    COMP_EQUAL      reduce using rule 91 (var_cte -> var_id .)
    COMP_NOTEQUAL   reduce using rule 91 (var_cte -> var_id .)
    COMP_AND        reduce using rule 91 (var_cte -> var_id .)
    COMP_OR         reduce using rule 91 (var_cte -> var_id .)


state 114

    (73) dec_assign -> var_id COMP_EQUAL dec_exp . SEMICOLON

    SEMICOLON       shift and go to state 139


state 115

    (46) dec_exp -> dec_exp_s .

    SEMICOLON       reduce using rule 46 (dec_exp -> dec_exp_s .)
    COMMA           reduce using rule 46 (dec_exp -> dec_exp_s .)
    RIGHTPAREN      reduce using rule 46 (dec_exp -> dec_exp_s .)


state 116

    (47) dec_exp_s -> dec_term . pm_op
    (48) pm_op -> . PLUS dec_exp_s
    (49) pm_op -> . MINUS dec_exp_s
    (50) pm_op -> . empty
    (97) empty -> .

    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    SEMICOLON       reduce using rule 97 (empty -> .)
    COMMA           reduce using rule 97 (empty -> .)
    RIGHTPAREN      reduce using rule 97 (empty -> .)
    COMP_LESS       reduce using rule 97 (empty -> .)
    COMP_GREATER    reduce using rule 97 (empty -> .)
    COMP_EQUAL      reduce using rule 97 (empty -> .)
    COMP_NOTEQUAL   reduce using rule 97 (empty -> .)
    COMP_AND        reduce using rule 97 (empty -> .)
    COMP_OR         reduce using rule 97 (empty -> .)

    pm_op                          shift and go to state 140
    empty                          shift and go to state 143

state 117

    (53) dec_term -> dec_fact . md_op
    (54) md_op -> . TIMES dec_term
    (55) md_op -> . DIVIDE dec_term
    (56) md_op -> . empty
    (97) empty -> .

    TIMES           shift and go to state 145
    DIVIDE          shift and go to state 146
    PLUS            reduce using rule 97 (empty -> .)
    MINUS           reduce using rule 97 (empty -> .)
    SEMICOLON       reduce using rule 97 (empty -> .)
    COMMA           reduce using rule 97 (empty -> .)
    RIGHTPAREN      reduce using rule 97 (empty -> .)
    COMP_LESS       reduce using rule 97 (empty -> .)
    COMP_GREATER    reduce using rule 97 (empty -> .)
    COMP_EQUAL      reduce using rule 97 (empty -> .)
    COMP_NOTEQUAL   reduce using rule 97 (empty -> .)
    COMP_AND        reduce using rule 97 (empty -> .)
    COMP_OR         reduce using rule 97 (empty -> .)

    md_op                          shift and go to state 144
    empty                          shift and go to state 147

state 118

    (57) dec_fact -> var_cte .

    TIMES           reduce using rule 57 (dec_fact -> var_cte .)
    DIVIDE          reduce using rule 57 (dec_fact -> var_cte .)
    PLUS            reduce using rule 57 (dec_fact -> var_cte .)
    MINUS           reduce using rule 57 (dec_fact -> var_cte .)
    SEMICOLON       reduce using rule 57 (dec_fact -> var_cte .)
    COMMA           reduce using rule 57 (dec_fact -> var_cte .)
    RIGHTPAREN      reduce using rule 57 (dec_fact -> var_cte .)
    COMP_LESS       reduce using rule 57 (dec_fact -> var_cte .)
    COMP_GREATER    reduce using rule 57 (dec_fact -> var_cte .)
    COMP_EQUAL      reduce using rule 57 (dec_fact -> var_cte .)
    COMP_NOTEQUAL   reduce using rule 57 (dec_fact -> var_cte .)
    COMP_AND        reduce using rule 57 (dec_fact -> var_cte .)
    COMP_OR         reduce using rule 57 (dec_fact -> var_cte .)


state 119

    (58) dec_fact -> LEFTPAREN . h_exp RIGHTPAREN
    (59) h_exp -> . s_exp ao_op
    (63) s_exp -> . dec_exp_s comp_op
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    h_exp                          shift and go to state 148
    s_exp                          shift and go to state 149
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 120

    (92) var_cte -> CTEI .

    TIMES           reduce using rule 92 (var_cte -> CTEI .)
    DIVIDE          reduce using rule 92 (var_cte -> CTEI .)
    PLUS            reduce using rule 92 (var_cte -> CTEI .)
    MINUS           reduce using rule 92 (var_cte -> CTEI .)
    SEMICOLON       reduce using rule 92 (var_cte -> CTEI .)
    COMMA           reduce using rule 92 (var_cte -> CTEI .)
    RIGHTPAREN      reduce using rule 92 (var_cte -> CTEI .)
    COMP_LESS       reduce using rule 92 (var_cte -> CTEI .)
    COMP_GREATER    reduce using rule 92 (var_cte -> CTEI .)
    COMP_EQUAL      reduce using rule 92 (var_cte -> CTEI .)
    COMP_NOTEQUAL   reduce using rule 92 (var_cte -> CTEI .)
    COMP_AND        reduce using rule 92 (var_cte -> CTEI .)
    COMP_OR         reduce using rule 92 (var_cte -> CTEI .)


state 121

    (93) var_cte -> CTEF .

    TIMES           reduce using rule 93 (var_cte -> CTEF .)
    DIVIDE          reduce using rule 93 (var_cte -> CTEF .)
    PLUS            reduce using rule 93 (var_cte -> CTEF .)
    MINUS           reduce using rule 93 (var_cte -> CTEF .)
    SEMICOLON       reduce using rule 93 (var_cte -> CTEF .)
    COMMA           reduce using rule 93 (var_cte -> CTEF .)
    RIGHTPAREN      reduce using rule 93 (var_cte -> CTEF .)
    COMP_LESS       reduce using rule 93 (var_cte -> CTEF .)
    COMP_GREATER    reduce using rule 93 (var_cte -> CTEF .)
    COMP_EQUAL      reduce using rule 93 (var_cte -> CTEF .)
    COMP_NOTEQUAL   reduce using rule 93 (var_cte -> CTEF .)
    COMP_AND        reduce using rule 93 (var_cte -> CTEF .)
    COMP_OR         reduce using rule 93 (var_cte -> CTEF .)


state 122

    (94) var_cte -> SIGN .

    TIMES           reduce using rule 94 (var_cte -> SIGN .)
    DIVIDE          reduce using rule 94 (var_cte -> SIGN .)
    PLUS            reduce using rule 94 (var_cte -> SIGN .)
    MINUS           reduce using rule 94 (var_cte -> SIGN .)
    SEMICOLON       reduce using rule 94 (var_cte -> SIGN .)
    COMMA           reduce using rule 94 (var_cte -> SIGN .)
    RIGHTPAREN      reduce using rule 94 (var_cte -> SIGN .)
    COMP_LESS       reduce using rule 94 (var_cte -> SIGN .)
    COMP_GREATER    reduce using rule 94 (var_cte -> SIGN .)
    COMP_EQUAL      reduce using rule 94 (var_cte -> SIGN .)
    COMP_NOTEQUAL   reduce using rule 94 (var_cte -> SIGN .)
    COMP_AND        reduce using rule 94 (var_cte -> SIGN .)
    COMP_OR         reduce using rule 94 (var_cte -> SIGN .)


state 123

    (95) var_id -> ID .

    TIMES           reduce using rule 95 (var_id -> ID .)
    DIVIDE          reduce using rule 95 (var_id -> ID .)
    PLUS            reduce using rule 95 (var_id -> ID .)
    MINUS           reduce using rule 95 (var_id -> ID .)
    SEMICOLON       reduce using rule 95 (var_id -> ID .)
    COMMA           reduce using rule 95 (var_id -> ID .)
    RIGHTPAREN      reduce using rule 95 (var_id -> ID .)
    COMP_LESS       reduce using rule 95 (var_id -> ID .)
    COMP_GREATER    reduce using rule 95 (var_id -> ID .)
    COMP_EQUAL      reduce using rule 95 (var_id -> ID .)
    COMP_NOTEQUAL   reduce using rule 95 (var_id -> ID .)
    COMP_AND        reduce using rule 95 (var_id -> ID .)
    COMP_OR         reduce using rule 95 (var_id -> ID .)


state 124

    (74) dec_call -> fun_id LEFTPAREN call_pos . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 151


state 125

    (75) call_pos -> call .

    RIGHTPAREN      reduce using rule 75 (call_pos -> call .)


state 126

    (76) call_pos -> empty .

    RIGHTPAREN      reduce using rule 76 (call_pos -> empty .)


state 127

    (77) call -> dec_exp . call_more
    (78) call_more -> . COMMA call
    (79) call_more -> . empty
    (97) empty -> .

    COMMA           shift and go to state 153
    RIGHTPAREN      reduce using rule 97 (empty -> .)

    call_more                      shift and go to state 152
    empty                          shift and go to state 154

state 128

    (80) dec_read -> INCO LEFTPAREN ID . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 155


state 129

    (81) dec_write -> OUTCO LEFTPAREN write . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 156


state 130

    (82) write -> dec_exp . write_more
    (84) write_more -> . COMMA write
    (85) write_more -> . empty
    (97) empty -> .

    COMMA           shift and go to state 158
    RIGHTPAREN      reduce using rule 97 (empty -> .)

    write_more                     shift and go to state 157
    empty                          shift and go to state 159

state 131

    (83) write -> var_cte . write_more
    (57) dec_fact -> var_cte .
    (84) write_more -> . COMMA write
    (85) write_more -> . empty
    (97) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 57 (dec_fact -> var_cte .)
    TIMES           reduce using rule 57 (dec_fact -> var_cte .)
    DIVIDE          reduce using rule 57 (dec_fact -> var_cte .)
    PLUS            reduce using rule 57 (dec_fact -> var_cte .)
    MINUS           reduce using rule 57 (dec_fact -> var_cte .)
    RIGHTPAREN      reduce using rule 57 (dec_fact -> var_cte .)
    COMMA           shift and go to state 158

  ! COMMA           [ reduce using rule 57 (dec_fact -> var_cte .) ]
  ! RIGHTPAREN      [ reduce using rule 97 (empty -> .) ]

    write_more                     shift and go to state 160
    empty                          shift and go to state 159

state 132

    (86) dec_condition -> IF LEFTPAREN dec_exp . RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else

    RIGHTPAREN      shift and go to state 161


state 133

    (89) dec_cycle -> WHILE LEFTPAREN dec_exp . RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET

    RIGHTPAREN      shift and go to state 162


state 134

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC . COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    COLON           shift and go to state 163


state 135

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method . SEMICOLON RIGHTBRACKET

    SEMICOLON       shift and go to state 164


state 136

    (51) dec_exp_method -> dec_exp_s .

    SEMICOLON       reduce using rule 51 (dec_exp_method -> dec_exp_s .)
    RIGHTPAREN      reduce using rule 51 (dec_exp_method -> dec_exp_s .)


state 137

    (52) dec_exp_method -> empty .

    SEMICOLON       reduce using rule 52 (dec_exp_method -> empty .)
    RIGHTPAREN      reduce using rule 52 (dec_exp_method -> empty .)


state 138

    (90) dec_method -> ID DOT ID LEFTPAREN . dec_exp_method RIGHTPAREN SEMICOLON
    (51) dec_exp_method -> . dec_exp_s
    (52) dec_exp_method -> . empty
    (47) dec_exp_s -> . dec_term pm_op
    (97) empty -> .
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    RIGHTPAREN      reduce using rule 97 (empty -> .)
    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_exp_method                 shift and go to state 165
    dec_exp_s                      shift and go to state 136
    empty                          shift and go to state 137
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 139

    (73) dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .

    INCO            reduce using rule 73 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    OUTCO           reduce using rule 73 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    IF              reduce using rule 73 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    WHILE           reduce using rule 73 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    ID              reduce using rule 73 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    RIGHTBRACKET    reduce using rule 73 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    RETURN          reduce using rule 73 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)


state 140

    (47) dec_exp_s -> dec_term pm_op .

    SEMICOLON       reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    COMMA           reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    RIGHTPAREN      reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    COMP_LESS       reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    COMP_GREATER    reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    COMP_EQUAL      reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    COMP_NOTEQUAL   reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    COMP_AND        reduce using rule 47 (dec_exp_s -> dec_term pm_op .)
    COMP_OR         reduce using rule 47 (dec_exp_s -> dec_term pm_op .)


state 141

    (48) pm_op -> PLUS . dec_exp_s
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_exp_s                      shift and go to state 166
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 142

    (49) pm_op -> MINUS . dec_exp_s
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_exp_s                      shift and go to state 167
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 143

    (50) pm_op -> empty .

    SEMICOLON       reduce using rule 50 (pm_op -> empty .)
    COMMA           reduce using rule 50 (pm_op -> empty .)
    RIGHTPAREN      reduce using rule 50 (pm_op -> empty .)
    COMP_LESS       reduce using rule 50 (pm_op -> empty .)
    COMP_GREATER    reduce using rule 50 (pm_op -> empty .)
    COMP_EQUAL      reduce using rule 50 (pm_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 50 (pm_op -> empty .)
    COMP_AND        reduce using rule 50 (pm_op -> empty .)
    COMP_OR         reduce using rule 50 (pm_op -> empty .)


state 144

    (53) dec_term -> dec_fact md_op .

    PLUS            reduce using rule 53 (dec_term -> dec_fact md_op .)
    MINUS           reduce using rule 53 (dec_term -> dec_fact md_op .)
    SEMICOLON       reduce using rule 53 (dec_term -> dec_fact md_op .)
    COMMA           reduce using rule 53 (dec_term -> dec_fact md_op .)
    RIGHTPAREN      reduce using rule 53 (dec_term -> dec_fact md_op .)
    COMP_LESS       reduce using rule 53 (dec_term -> dec_fact md_op .)
    COMP_GREATER    reduce using rule 53 (dec_term -> dec_fact md_op .)
    COMP_EQUAL      reduce using rule 53 (dec_term -> dec_fact md_op .)
    COMP_NOTEQUAL   reduce using rule 53 (dec_term -> dec_fact md_op .)
    COMP_AND        reduce using rule 53 (dec_term -> dec_fact md_op .)
    COMP_OR         reduce using rule 53 (dec_term -> dec_fact md_op .)


state 145

    (54) md_op -> TIMES . dec_term
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_term                       shift and go to state 168
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 146

    (55) md_op -> DIVIDE . dec_term
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    dec_term                       shift and go to state 169
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 147

    (56) md_op -> empty .

    PLUS            reduce using rule 56 (md_op -> empty .)
    MINUS           reduce using rule 56 (md_op -> empty .)
    SEMICOLON       reduce using rule 56 (md_op -> empty .)
    COMMA           reduce using rule 56 (md_op -> empty .)
    RIGHTPAREN      reduce using rule 56 (md_op -> empty .)
    COMP_LESS       reduce using rule 56 (md_op -> empty .)
    COMP_GREATER    reduce using rule 56 (md_op -> empty .)
    COMP_EQUAL      reduce using rule 56 (md_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 56 (md_op -> empty .)
    COMP_AND        reduce using rule 56 (md_op -> empty .)
    COMP_OR         reduce using rule 56 (md_op -> empty .)


state 148

    (58) dec_fact -> LEFTPAREN h_exp . RIGHTPAREN

    RIGHTPAREN      shift and go to state 170


state 149

    (59) h_exp -> s_exp . ao_op
    (60) ao_op -> . COMP_AND h_exp
    (61) ao_op -> . COMP_OR h_exp
    (62) ao_op -> . empty
    (97) empty -> .

    COMP_AND        shift and go to state 172
    COMP_OR         shift and go to state 173
    RIGHTPAREN      reduce using rule 97 (empty -> .)

    ao_op                          shift and go to state 171
    empty                          shift and go to state 174

state 150

    (63) s_exp -> dec_exp_s . comp_op
    (64) comp_op -> . COMP_LESS s_exp
    (65) comp_op -> . COMP_GREATER s_exp
    (66) comp_op -> . COMP_EQUAL s_exp
    (67) comp_op -> . COMP_NOTEQUAL s_exp
    (68) comp_op -> . empty
    (97) empty -> .

    COMP_LESS       shift and go to state 176
    COMP_GREATER    shift and go to state 177
    COMP_EQUAL      shift and go to state 178
    COMP_NOTEQUAL   shift and go to state 179
    COMP_AND        reduce using rule 97 (empty -> .)
    COMP_OR         reduce using rule 97 (empty -> .)
    RIGHTPAREN      reduce using rule 97 (empty -> .)

    comp_op                        shift and go to state 175
    empty                          shift and go to state 180

state 151

    (74) dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 152

    (77) call -> dec_exp call_more .

    RIGHTPAREN      reduce using rule 77 (call -> dec_exp call_more .)


state 153

    (78) call_more -> COMMA . call
    (77) call -> . dec_exp call_more
    (46) dec_exp -> . dec_exp_s
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    call                           shift and go to state 182
    dec_exp                        shift and go to state 127
    dec_exp_s                      shift and go to state 115
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 154

    (79) call_more -> empty .

    RIGHTPAREN      reduce using rule 79 (call_more -> empty .)


state 155

    (80) dec_read -> INCO LEFTPAREN ID RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 183


state 156

    (81) dec_write -> OUTCO LEFTPAREN write RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 184


state 157

    (82) write -> dec_exp write_more .

    RIGHTPAREN      reduce using rule 82 (write -> dec_exp write_more .)


state 158

    (84) write_more -> COMMA . write
    (82) write -> . dec_exp write_more
    (83) write -> . var_cte write_more
    (46) dec_exp -> . dec_exp_s
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (47) dec_exp_s -> . dec_term pm_op
    (95) var_id -> . ID
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123
    LEFTPAREN       shift and go to state 119

    write                          shift and go to state 185
    dec_exp                        shift and go to state 130
    var_cte                        shift and go to state 131
    dec_exp_s                      shift and go to state 115
    var_id                         shift and go to state 113
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117

state 159

    (85) write_more -> empty .

    RIGHTPAREN      reduce using rule 85 (write_more -> empty .)


state 160

    (83) write -> var_cte write_more .

    RIGHTPAREN      reduce using rule 83 (write -> var_cte write_more .)


state 161

    (86) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN . LEFTBRACKET dec_block RIGHTBRACKET dec_else

    LEFTBRACKET     shift and go to state 186


state 162

    (89) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN . LEFTBRACKET dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 187


state 163

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON . dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (97) empty -> .

    VAR             shift and go to state 6
    FUN             reduce using rule 97 (empty -> .)
    RIGHTBRACKET    reduce using rule 97 (empty -> .)

    dec_vars                       shift and go to state 188
    empty                          shift and go to state 7

state 164

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 189


state 165

    (90) dec_method -> ID DOT ID LEFTPAREN dec_exp_method . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 190


state 166

    (48) pm_op -> PLUS dec_exp_s .

    SEMICOLON       reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    COMMA           reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    RIGHTPAREN      reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    COMP_LESS       reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    COMP_GREATER    reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    COMP_EQUAL      reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    COMP_NOTEQUAL   reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    COMP_AND        reduce using rule 48 (pm_op -> PLUS dec_exp_s .)
    COMP_OR         reduce using rule 48 (pm_op -> PLUS dec_exp_s .)


state 167

    (49) pm_op -> MINUS dec_exp_s .

    SEMICOLON       reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    COMMA           reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    RIGHTPAREN      reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    COMP_LESS       reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    COMP_GREATER    reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    COMP_EQUAL      reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    COMP_NOTEQUAL   reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    COMP_AND        reduce using rule 49 (pm_op -> MINUS dec_exp_s .)
    COMP_OR         reduce using rule 49 (pm_op -> MINUS dec_exp_s .)


state 168

    (54) md_op -> TIMES dec_term .

    PLUS            reduce using rule 54 (md_op -> TIMES dec_term .)
    MINUS           reduce using rule 54 (md_op -> TIMES dec_term .)
    SEMICOLON       reduce using rule 54 (md_op -> TIMES dec_term .)
    COMMA           reduce using rule 54 (md_op -> TIMES dec_term .)
    RIGHTPAREN      reduce using rule 54 (md_op -> TIMES dec_term .)
    COMP_LESS       reduce using rule 54 (md_op -> TIMES dec_term .)
    COMP_GREATER    reduce using rule 54 (md_op -> TIMES dec_term .)
    COMP_EQUAL      reduce using rule 54 (md_op -> TIMES dec_term .)
    COMP_NOTEQUAL   reduce using rule 54 (md_op -> TIMES dec_term .)
    COMP_AND        reduce using rule 54 (md_op -> TIMES dec_term .)
    COMP_OR         reduce using rule 54 (md_op -> TIMES dec_term .)


state 169

    (55) md_op -> DIVIDE dec_term .

    PLUS            reduce using rule 55 (md_op -> DIVIDE dec_term .)
    MINUS           reduce using rule 55 (md_op -> DIVIDE dec_term .)
    SEMICOLON       reduce using rule 55 (md_op -> DIVIDE dec_term .)
    COMMA           reduce using rule 55 (md_op -> DIVIDE dec_term .)
    RIGHTPAREN      reduce using rule 55 (md_op -> DIVIDE dec_term .)
    COMP_LESS       reduce using rule 55 (md_op -> DIVIDE dec_term .)
    COMP_GREATER    reduce using rule 55 (md_op -> DIVIDE dec_term .)
    COMP_EQUAL      reduce using rule 55 (md_op -> DIVIDE dec_term .)
    COMP_NOTEQUAL   reduce using rule 55 (md_op -> DIVIDE dec_term .)
    COMP_AND        reduce using rule 55 (md_op -> DIVIDE dec_term .)
    COMP_OR         reduce using rule 55 (md_op -> DIVIDE dec_term .)


state 170

    (58) dec_fact -> LEFTPAREN h_exp RIGHTPAREN .

    TIMES           reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    DIVIDE          reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    PLUS            reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    MINUS           reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    SEMICOLON       reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMMA           reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_LESS       reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_GREATER    reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_EQUAL      reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_NOTEQUAL   reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_AND        reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_OR         reduce using rule 58 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)


state 171

    (59) h_exp -> s_exp ao_op .

    RIGHTPAREN      reduce using rule 59 (h_exp -> s_exp ao_op .)


state 172

    (60) ao_op -> COMP_AND . h_exp
    (59) h_exp -> . s_exp ao_op
    (63) s_exp -> . dec_exp_s comp_op
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    h_exp                          shift and go to state 191
    s_exp                          shift and go to state 149
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 173

    (61) ao_op -> COMP_OR . h_exp
    (59) h_exp -> . s_exp ao_op
    (63) s_exp -> . dec_exp_s comp_op
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    h_exp                          shift and go to state 192
    s_exp                          shift and go to state 149
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 174

    (62) ao_op -> empty .

    RIGHTPAREN      reduce using rule 62 (ao_op -> empty .)


state 175

    (63) s_exp -> dec_exp_s comp_op .

    COMP_AND        reduce using rule 63 (s_exp -> dec_exp_s comp_op .)
    COMP_OR         reduce using rule 63 (s_exp -> dec_exp_s comp_op .)
    RIGHTPAREN      reduce using rule 63 (s_exp -> dec_exp_s comp_op .)


state 176

    (64) comp_op -> COMP_LESS . s_exp
    (63) s_exp -> . dec_exp_s comp_op
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    s_exp                          shift and go to state 193
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 177

    (65) comp_op -> COMP_GREATER . s_exp
    (63) s_exp -> . dec_exp_s comp_op
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    s_exp                          shift and go to state 194
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 178

    (66) comp_op -> COMP_EQUAL . s_exp
    (63) s_exp -> . dec_exp_s comp_op
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    s_exp                          shift and go to state 195
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 179

    (67) comp_op -> COMP_NOTEQUAL . s_exp
    (63) s_exp -> . dec_exp_s comp_op
    (47) dec_exp_s -> . dec_term pm_op
    (53) dec_term -> . dec_fact md_op
    (57) dec_fact -> . var_cte
    (58) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN
    (91) var_cte -> . var_id
    (92) var_cte -> . CTEI
    (93) var_cte -> . CTEF
    (94) var_cte -> . SIGN
    (95) var_id -> . ID

    LEFTPAREN       shift and go to state 119
    CTEI            shift and go to state 120
    CTEF            shift and go to state 121
    SIGN            shift and go to state 122
    ID              shift and go to state 123

    s_exp                          shift and go to state 196
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 116
    dec_fact                       shift and go to state 117
    var_cte                        shift and go to state 118
    var_id                         shift and go to state 113

state 180

    (68) comp_op -> empty .

    COMP_AND        reduce using rule 68 (comp_op -> empty .)
    COMP_OR         reduce using rule 68 (comp_op -> empty .)
    RIGHTPAREN      reduce using rule 68 (comp_op -> empty .)


state 181

    (74) dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .

    INCO            reduce using rule 74 (dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 74 (dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 74 (dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 74 (dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    ID              reduce using rule 74 (dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 74 (dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 74 (dec_call -> fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)


state 182

    (78) call_more -> COMMA call .

    RIGHTPAREN      reduce using rule 78 (call_more -> COMMA call .)


state 183

    (80) dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .

    INCO            reduce using rule 80 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 80 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 80 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 80 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    ID              reduce using rule 80 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 80 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 80 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)


state 184

    (81) dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .

    INCO            reduce using rule 81 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 81 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 81 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 81 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    ID              reduce using rule 81 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 81 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 81 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)


state 185

    (84) write_more -> COMMA write .

    RIGHTPAREN      reduce using rule 84 (write_more -> COMMA write .)


state 186

    (86) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET . dec_block RIGHTBRACKET dec_else
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (97) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (73) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (74) dec_call -> . fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (80) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (81) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (86) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (89) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (90) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (95) var_id -> . ID
    (96) fun_id -> . ID

    RIGHTBRACKET    reduce using rule 97 (empty -> .)
    INCO            shift and go to state 91
    OUTCO           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    ID              shift and go to state 77

    dec_block                      shift and go to state 197
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88
    var_id                         shift and go to state 89
    fun_id                         shift and go to state 90

state 187

    (89) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET . dec_block RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (97) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (73) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (74) dec_call -> . fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (80) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (81) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (86) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (89) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (90) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (95) var_id -> . ID
    (96) fun_id -> . ID

    RIGHTBRACKET    reduce using rule 97 (empty -> .)
    INCO            shift and go to state 91
    OUTCO           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    ID              shift and go to state 77

    dec_block                      shift and go to state 198
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88
    var_id                         shift and go to state 89
    fun_id                         shift and go to state 90

state 188

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars . dec_fun RIGHTBRACKET SEMICOLON
    (24) dec_fun -> . fun
    (25) dec_fun -> . empty
    (26) fun -> . FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (97) empty -> .

    FUN             shift and go to state 11
    RIGHTBRACKET    reduce using rule 97 (empty -> .)

    dec_fun                        shift and go to state 199
    fun                            shift and go to state 9
    empty                          shift and go to state 10

state 189

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .

    CLASS           reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)
    MAIN            reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)
    PUBLIC          reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)


state 190

    (90) dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 200


state 191

    (60) ao_op -> COMP_AND h_exp .

    RIGHTPAREN      reduce using rule 60 (ao_op -> COMP_AND h_exp .)


state 192

    (61) ao_op -> COMP_OR h_exp .

    RIGHTPAREN      reduce using rule 61 (ao_op -> COMP_OR h_exp .)


state 193

    (64) comp_op -> COMP_LESS s_exp .

    COMP_AND        reduce using rule 64 (comp_op -> COMP_LESS s_exp .)
    COMP_OR         reduce using rule 64 (comp_op -> COMP_LESS s_exp .)
    RIGHTPAREN      reduce using rule 64 (comp_op -> COMP_LESS s_exp .)


state 194

    (65) comp_op -> COMP_GREATER s_exp .

    COMP_AND        reduce using rule 65 (comp_op -> COMP_GREATER s_exp .)
    COMP_OR         reduce using rule 65 (comp_op -> COMP_GREATER s_exp .)
    RIGHTPAREN      reduce using rule 65 (comp_op -> COMP_GREATER s_exp .)


state 195

    (66) comp_op -> COMP_EQUAL s_exp .

    COMP_AND        reduce using rule 66 (comp_op -> COMP_EQUAL s_exp .)
    COMP_OR         reduce using rule 66 (comp_op -> COMP_EQUAL s_exp .)
    RIGHTPAREN      reduce using rule 66 (comp_op -> COMP_EQUAL s_exp .)


state 196

    (67) comp_op -> COMP_NOTEQUAL s_exp .

    COMP_AND        reduce using rule 67 (comp_op -> COMP_NOTEQUAL s_exp .)
    COMP_OR         reduce using rule 67 (comp_op -> COMP_NOTEQUAL s_exp .)
    RIGHTPAREN      reduce using rule 67 (comp_op -> COMP_NOTEQUAL s_exp .)


state 197

    (86) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block . RIGHTBRACKET dec_else

    RIGHTBRACKET    shift and go to state 201


state 198

    (89) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 202


state 199

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun . RIGHTBRACKET SEMICOLON

    RIGHTBRACKET    shift and go to state 203


state 200

    (90) dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .

    INCO            reduce using rule 90 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 90 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 90 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 90 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    ID              reduce using rule 90 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 90 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 90 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)


state 201

    (86) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET . dec_else
    (87) dec_else -> . ELSE LEFTBRACKET dec_block RIGHTBRACKET
    (88) dec_else -> . empty
    (97) empty -> .

    ELSE            shift and go to state 205
    INCO            reduce using rule 97 (empty -> .)
    OUTCO           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    RIGHTBRACKET    reduce using rule 97 (empty -> .)
    RETURN          reduce using rule 97 (empty -> .)

    dec_else                       shift and go to state 204
    empty                          shift and go to state 206

state 202

    (89) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .

    INCO            reduce using rule 89 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    OUTCO           reduce using rule 89 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    IF              reduce using rule 89 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    WHILE           reduce using rule 89 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    ID              reduce using rule 89 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 89 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    RETURN          reduce using rule 89 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)


state 203

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 207


state 204

    (86) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .

    INCO            reduce using rule 86 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    OUTCO           reduce using rule 86 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    IF              reduce using rule 86 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    WHILE           reduce using rule 86 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    ID              reduce using rule 86 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    RIGHTBRACKET    reduce using rule 86 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    RETURN          reduce using rule 86 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)


state 205

    (87) dec_else -> ELSE . LEFTBRACKET dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 208


state 206

    (88) dec_else -> empty .

    INCO            reduce using rule 88 (dec_else -> empty .)
    OUTCO           reduce using rule 88 (dec_else -> empty .)
    IF              reduce using rule 88 (dec_else -> empty .)
    WHILE           reduce using rule 88 (dec_else -> empty .)
    ID              reduce using rule 88 (dec_else -> empty .)
    RIGHTBRACKET    reduce using rule 88 (dec_else -> empty .)
    RETURN          reduce using rule 88 (dec_else -> empty .)


state 207

    (69) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON .

    MAIN            reduce using rule 69 (dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON .)


state 208

    (87) dec_else -> ELSE LEFTBRACKET . dec_block RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (97) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (73) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (74) dec_call -> . fun_id LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (80) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (81) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (86) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (89) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (90) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (95) var_id -> . ID
    (96) fun_id -> . ID

    RIGHTBRACKET    reduce using rule 97 (empty -> .)
    INCO            shift and go to state 91
    OUTCO           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    ID              shift and go to state 77

    dec_block                      shift and go to state 209
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88
    var_id                         shift and go to state 89
    fun_id                         shift and go to state 90

state 209

    (87) dec_else -> ELSE LEFTBRACKET dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 210


state 210

    (87) dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .

    INCO            reduce using rule 87 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    OUTCO           reduce using rule 87 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    IF              reduce using rule 87 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    WHILE           reduce using rule 87 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    ID              reduce using rule 87 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 87 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    RETURN          reduce using rule 87 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 131 resolved as shift
WARNING: reduce/reduce conflict in state 131 resolved using rule (dec_fact -> var_cte)
WARNING: rejected rule (empty -> <empty>) in state 131
