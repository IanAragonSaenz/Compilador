Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
Rule 2     dec_vars -> VAR vars SEMICOLON
Rule 3     dec_vars -> empty
Rule 4     vars -> vars_simple
Rule 5     vars -> vars_complex
Rule 6     vars_simple -> type_simple vars_simple_dec
Rule 7     vars_simple_dec -> vars_simple_id vars_simple_more
Rule 8     vars_simple_more -> COMMA vars_simple_dec
Rule 9     vars_simple_more -> empty
Rule 10    vars_simple_id -> ID vars_simple_arr
Rule 11    vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2
Rule 12    vars_simple_arr -> empty
Rule 13    vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY
Rule 14    vars_simple_arr2 -> empty
Rule 15    vars_complex -> type_complex vars_complex_dec
Rule 16    vars_complex_dec -> ID vars_complex_more
Rule 17    vars_complex_more -> COMMA vars_complex_dec
Rule 18    vars_complex_more -> empty
Rule 19    type_simple -> INT
Rule 20    type_simple -> FLOAT
Rule 21    type_simple -> CHAR
Rule 22    type_complex -> FILE
Rule 23    type_complex -> ID
Rule 24    dec_fun -> fun
Rule 25    dec_fun -> empty
Rule 26    fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
Rule 27    param_pos -> param
Rule 28    param_pos -> empty
Rule 29    param -> type_simple ID param_more
Rule 30    param_more -> COMMA param
Rule 31    param_more -> empty
Rule 32    fun_type -> type_simple
Rule 33    fun_type -> VOID
Rule 34    dec_block -> block
Rule 35    dec_block -> empty
Rule 36    block -> statement block_more
Rule 37    block_more -> block
Rule 38    block_more -> empty
Rule 39    statement -> dec_assign
Rule 40    statement -> dec_call
Rule 41    statement -> dec_read
Rule 42    statement -> dec_write
Rule 43    statement -> dec_condition
Rule 44    statement -> dec_cycle
Rule 45    statement -> dec_method
Rule 46    dec_exp -> dec_term pm_op
Rule 47    pm_op -> PLUS dec_exp
Rule 48    pm_op -> MINUS dec_term
Rule 49    pm_op -> empty
Rule 50    dec_exp_method -> dec_exp
Rule 51    dec_exp_method -> empty
Rule 52    dec_term -> dec_fact md_op
Rule 53    md_op -> TIMES dec_term
Rule 54    md_op -> DIVIDE dec_term
Rule 55    md_op -> empty
Rule 56    dec_fact -> ID
Rule 57    dec_fact -> CTEF
Rule 58    dec_fact -> CTEI
Rule 59    dec_fact -> LEFTPAREN h_exp RIGHTPAREN
Rule 60    h_exp -> s_exp ao_op
Rule 61    ao_op -> COMP_AND h_exp
Rule 62    ao_op -> COMP_OR h_exp
Rule 63    ao_op -> empty
Rule 64    s_exp -> dec_exp comp_op
Rule 65    comp_op -> COMP_LESS dec_exp
Rule 66    comp_op -> COMP_GREATER dec_exp
Rule 67    comp_op -> COMP_EQUAL dec_exp
Rule 68    comp_op -> COMP_NOTEQUAL dec_exp
Rule 69    comp_op -> empty
Rule 70    dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
Rule 71    dec_class -> empty
Rule 72    dec_inherit -> COLON INHERIT ID
Rule 73    dec_inherit -> empty
Rule 74    dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON
Rule 75    dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
Rule 76    call_pos -> call
Rule 77    call_pos -> empty
Rule 78    call -> dec_exp call_more
Rule 79    call_more -> COMMA call
Rule 80    call_more -> empty
Rule 81    dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
Rule 82    dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
Rule 83    write -> dec_exp write_more
Rule 84    write -> var_cte write_more
Rule 85    write_more -> COMMA write
Rule 86    write_more -> empty
Rule 87    dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
Rule 88    dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET
Rule 89    dec_else -> empty
Rule 90    dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
Rule 91    dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
Rule 92    var_cte -> ID
Rule 93    var_cte -> CTEI
Rule 94    var_cte -> CTEF
Rule 95    var_cte -> SIGN
Rule 96    empty -> <empty>

Terminals, with rules where they appear

CHAR                 : 21
CLASS                : 70
COLON                : 70 70 72
COMMA                : 8 17 30 79 85
COMP_AND             : 61
COMP_EQUAL           : 67 74
COMP_GREATER         : 66
COMP_LESS            : 65
COMP_NOTEQUAL        : 68
COMP_OR              : 62
CTEF                 : 57 94
CTEI                 : 11 13 58 93
DIVIDE               : 54
DOT                  : 91
ELSE                 : 88
FILE                 : 22
FLOAT                : 20
FUN                  : 26
ID                   : 1 10 16 23 26 29 56 70 72 74 75 81 91 91 92
IF                   : 87
INCO                 : 81
INHERIT              : 72
INT                  : 19
LEFTBRACKET          : 1 26 70 87 88 90
LEFTKEY              : 11 13
LEFTPAREN            : 1 26 59 75 81 82 87 90 91
MAIN                 : 1
MINUS                : 48
OUTCO                : 82
PLUS                 : 47
PRIVATE              : 70
PROGRAM              : 1
PUBLIC               : 70
RETURN               : 26
RIGHTBRACKET         : 1 26 70 87 88 90
RIGHTKEY             : 11 13
RIGHTPAREN           : 1 26 59 75 81 82 87 90 91
SEMICOLON            : 1 2 26 70 74 75 81 82 91
SIGN                 : 95
TIMES                : 53
VAR                  : 2
VOID                 : 33
WHILE                : 90
error                : 

Nonterminals, with rules where they appear

ao_op                : 60
block                : 34 37
block_more           : 36
call                 : 76 79
call_more            : 78
call_pos             : 75
comp_op              : 64
dec_assign           : 39
dec_block            : 1 26 87 88 90
dec_call             : 40
dec_class            : 1
dec_condition        : 43
dec_cycle            : 44
dec_else             : 87
dec_exp              : 47 50 64 65 66 67 68 74 78 83 87 90
dec_exp_method       : 26 91
dec_fact             : 52
dec_fun              : 1 70 70
dec_inherit          : 70
dec_method           : 45
dec_read             : 41
dec_term             : 46 48 53 54
dec_vars             : 1 1 70 70
dec_write            : 42
empty                : 3 9 12 14 18 25 28 31 35 38 49 51 55 63 69 71 73 77 80 86 89
fun                  : 24
fun_type             : 26
h_exp                : 59 61 62
md_op                : 52
param                : 27 30
param_more           : 29
param_pos            : 26
pm_op                : 46
program              : 0
s_exp                : 60
statement            : 36
type_complex         : 15
type_simple          : 6 29 32
var_cte              : 84
vars                 : 2
vars_complex         : 5
vars_complex_dec     : 15 17
vars_complex_more    : 16
vars_simple          : 4
vars_simple_arr      : 10
vars_simple_arr2     : 11
vars_simple_dec      : 6 8
vars_simple_id       : 7
vars_simple_more     : 7
write                : 82 85
write_more           : 83 84

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (96) empty -> .

    VAR             shift and go to state 6
    FUN             reduce using rule 96 (empty -> .)
    CLASS           reduce using rule 96 (empty -> .)
    MAIN            reduce using rule 96 (empty -> .)

    dec_vars                       shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON dec_vars . dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
    (24) dec_fun -> . fun
    (25) dec_fun -> . empty
    (26) fun -> . FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (96) empty -> .

    FUN             shift and go to state 11
    CLASS           reduce using rule 96 (empty -> .)
    MAIN            reduce using rule 96 (empty -> .)

    dec_fun                        shift and go to state 8
    fun                            shift and go to state 9
    empty                          shift and go to state 10

state 6

    (2) dec_vars -> VAR . vars SEMICOLON
    (4) vars -> . vars_simple
    (5) vars -> . vars_complex
    (6) vars_simple -> . type_simple vars_simple_dec
    (15) vars_complex -> . type_complex vars_complex_dec
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR
    (22) type_complex -> . FILE
    (23) type_complex -> . ID

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    FILE            shift and go to state 20
    ID              shift and go to state 21

    vars                           shift and go to state 12
    vars_simple                    shift and go to state 13
    vars_complex                   shift and go to state 14
    type_simple                    shift and go to state 15
    type_complex                   shift and go to state 16

state 7

    (3) dec_vars -> empty .

    FUN             reduce using rule 3 (dec_vars -> empty .)
    CLASS           reduce using rule 3 (dec_vars -> empty .)
    MAIN            reduce using rule 3 (dec_vars -> empty .)
    ID              reduce using rule 3 (dec_vars -> empty .)
    INCO            reduce using rule 3 (dec_vars -> empty .)
    OUTCO           reduce using rule 3 (dec_vars -> empty .)
    IF              reduce using rule 3 (dec_vars -> empty .)
    WHILE           reduce using rule 3 (dec_vars -> empty .)
    RIGHTBRACKET    reduce using rule 3 (dec_vars -> empty .)
    PUBLIC          reduce using rule 3 (dec_vars -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun . dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET
    (70) dec_class -> . CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (71) dec_class -> . empty
    (96) empty -> .

    CLASS           shift and go to state 23
    MAIN            reduce using rule 96 (empty -> .)

    dec_class                      shift and go to state 22
    empty                          shift and go to state 24

state 9

    (24) dec_fun -> fun .

    CLASS           reduce using rule 24 (dec_fun -> fun .)
    MAIN            reduce using rule 24 (dec_fun -> fun .)
    PUBLIC          reduce using rule 24 (dec_fun -> fun .)
    RIGHTBRACKET    reduce using rule 24 (dec_fun -> fun .)


state 10

    (25) dec_fun -> empty .

    CLASS           reduce using rule 25 (dec_fun -> empty .)
    MAIN            reduce using rule 25 (dec_fun -> empty .)
    PUBLIC          reduce using rule 25 (dec_fun -> empty .)
    RIGHTBRACKET    reduce using rule 25 (dec_fun -> empty .)


state 11

    (26) fun -> FUN . fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (32) fun_type -> . type_simple
    (33) fun_type -> . VOID
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR

    VOID            shift and go to state 27
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    fun_type                       shift and go to state 25
    type_simple                    shift and go to state 26

state 12

    (2) dec_vars -> VAR vars . SEMICOLON

    SEMICOLON       shift and go to state 28


state 13

    (4) vars -> vars_simple .

    SEMICOLON       reduce using rule 4 (vars -> vars_simple .)


state 14

    (5) vars -> vars_complex .

    SEMICOLON       reduce using rule 5 (vars -> vars_complex .)


state 15

    (6) vars_simple -> type_simple . vars_simple_dec
    (7) vars_simple_dec -> . vars_simple_id vars_simple_more
    (10) vars_simple_id -> . ID vars_simple_arr

    ID              shift and go to state 31

    vars_simple_dec                shift and go to state 29
    vars_simple_id                 shift and go to state 30

state 16

    (15) vars_complex -> type_complex . vars_complex_dec
    (16) vars_complex_dec -> . ID vars_complex_more

    ID              shift and go to state 33

    vars_complex_dec               shift and go to state 32

state 17

    (19) type_simple -> INT .

    ID              reduce using rule 19 (type_simple -> INT .)


state 18

    (20) type_simple -> FLOAT .

    ID              reduce using rule 20 (type_simple -> FLOAT .)


state 19

    (21) type_simple -> CHAR .

    ID              reduce using rule 21 (type_simple -> CHAR .)


state 20

    (22) type_complex -> FILE .

    ID              reduce using rule 22 (type_complex -> FILE .)


state 21

    (23) type_complex -> ID .

    ID              reduce using rule 23 (type_complex -> ID .)


state 22

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class . MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    MAIN            shift and go to state 34


state 23

    (70) dec_class -> CLASS . ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    ID              shift and go to state 35


state 24

    (71) dec_class -> empty .

    MAIN            reduce using rule 71 (dec_class -> empty .)


state 25

    (26) fun -> FUN fun_type . ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    ID              shift and go to state 36


state 26

    (32) fun_type -> type_simple .

    ID              reduce using rule 32 (fun_type -> type_simple .)


state 27

    (33) fun_type -> VOID .

    ID              reduce using rule 33 (fun_type -> VOID .)


state 28

    (2) dec_vars -> VAR vars SEMICOLON .

    FUN             reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    CLASS           reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    MAIN            reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    ID              reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    INCO            reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    OUTCO           reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    IF              reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    WHILE           reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    RIGHTBRACKET    reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)
    PUBLIC          reduce using rule 2 (dec_vars -> VAR vars SEMICOLON .)


state 29

    (6) vars_simple -> type_simple vars_simple_dec .

    SEMICOLON       reduce using rule 6 (vars_simple -> type_simple vars_simple_dec .)


state 30

    (7) vars_simple_dec -> vars_simple_id . vars_simple_more
    (8) vars_simple_more -> . COMMA vars_simple_dec
    (9) vars_simple_more -> . empty
    (96) empty -> .

    COMMA           shift and go to state 38
    SEMICOLON       reduce using rule 96 (empty -> .)

    vars_simple_more               shift and go to state 37
    empty                          shift and go to state 39

state 31

    (10) vars_simple_id -> ID . vars_simple_arr
    (11) vars_simple_arr -> . LEFTKEY CTEI RIGHTKEY vars_simple_arr2
    (12) vars_simple_arr -> . empty
    (96) empty -> .

    LEFTKEY         shift and go to state 41
    COMMA           reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)

    vars_simple_arr                shift and go to state 40
    empty                          shift and go to state 42

state 32

    (15) vars_complex -> type_complex vars_complex_dec .

    SEMICOLON       reduce using rule 15 (vars_complex -> type_complex vars_complex_dec .)


state 33

    (16) vars_complex_dec -> ID . vars_complex_more
    (17) vars_complex_more -> . COMMA vars_complex_dec
    (18) vars_complex_more -> . empty
    (96) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 96 (empty -> .)

    vars_complex_more              shift and go to state 43
    empty                          shift and go to state 45

state 34

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN . LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    LEFTPAREN       shift and go to state 46


state 35

    (70) dec_class -> CLASS ID . dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (72) dec_inherit -> . COLON INHERIT ID
    (73) dec_inherit -> . empty
    (96) empty -> .

    COLON           shift and go to state 48
    LEFTBRACKET     reduce using rule 96 (empty -> .)

    dec_inherit                    shift and go to state 47
    empty                          shift and go to state 49

state 36

    (26) fun -> FUN fun_type ID . LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    LEFTPAREN       shift and go to state 50


state 37

    (7) vars_simple_dec -> vars_simple_id vars_simple_more .

    SEMICOLON       reduce using rule 7 (vars_simple_dec -> vars_simple_id vars_simple_more .)


state 38

    (8) vars_simple_more -> COMMA . vars_simple_dec
    (7) vars_simple_dec -> . vars_simple_id vars_simple_more
    (10) vars_simple_id -> . ID vars_simple_arr

    ID              shift and go to state 31

    vars_simple_dec                shift and go to state 51
    vars_simple_id                 shift and go to state 30

state 39

    (9) vars_simple_more -> empty .

    SEMICOLON       reduce using rule 9 (vars_simple_more -> empty .)


state 40

    (10) vars_simple_id -> ID vars_simple_arr .

    COMMA           reduce using rule 10 (vars_simple_id -> ID vars_simple_arr .)
    SEMICOLON       reduce using rule 10 (vars_simple_id -> ID vars_simple_arr .)


state 41

    (11) vars_simple_arr -> LEFTKEY . CTEI RIGHTKEY vars_simple_arr2

    CTEI            shift and go to state 52


state 42

    (12) vars_simple_arr -> empty .

    COMMA           reduce using rule 12 (vars_simple_arr -> empty .)
    SEMICOLON       reduce using rule 12 (vars_simple_arr -> empty .)


state 43

    (16) vars_complex_dec -> ID vars_complex_more .

    SEMICOLON       reduce using rule 16 (vars_complex_dec -> ID vars_complex_more .)


state 44

    (17) vars_complex_more -> COMMA . vars_complex_dec
    (16) vars_complex_dec -> . ID vars_complex_more

    ID              shift and go to state 33

    vars_complex_dec               shift and go to state 53

state 45

    (18) vars_complex_more -> empty .

    SEMICOLON       reduce using rule 18 (vars_complex_more -> empty .)


state 46

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN . RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    RIGHTPAREN      shift and go to state 54


state 47

    (70) dec_class -> CLASS ID dec_inherit . LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    LEFTBRACKET     shift and go to state 55


state 48

    (72) dec_inherit -> COLON . INHERIT ID

    INHERIT         shift and go to state 56


state 49

    (73) dec_inherit -> empty .

    LEFTBRACKET     reduce using rule 73 (dec_inherit -> empty .)


state 50

    (26) fun -> FUN fun_type ID LEFTPAREN . param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (27) param_pos -> . param
    (28) param_pos -> . empty
    (29) param -> . type_simple ID param_more
    (96) empty -> .
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR

    RIGHTPAREN      reduce using rule 96 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    param_pos                      shift and go to state 57
    param                          shift and go to state 58
    empty                          shift and go to state 59
    type_simple                    shift and go to state 60

state 51

    (8) vars_simple_more -> COMMA vars_simple_dec .

    SEMICOLON       reduce using rule 8 (vars_simple_more -> COMMA vars_simple_dec .)


state 52

    (11) vars_simple_arr -> LEFTKEY CTEI . RIGHTKEY vars_simple_arr2

    RIGHTKEY        shift and go to state 61


state 53

    (17) vars_complex_more -> COMMA vars_complex_dec .

    SEMICOLON       reduce using rule 17 (vars_complex_more -> COMMA vars_complex_dec .)


state 54

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN . LEFTBRACKET dec_vars dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 62


state 55

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET . PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    PRIVATE         shift and go to state 63


state 56

    (72) dec_inherit -> COLON INHERIT . ID

    ID              shift and go to state 64


state 57

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos . RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    RIGHTPAREN      shift and go to state 65


state 58

    (27) param_pos -> param .

    RIGHTPAREN      reduce using rule 27 (param_pos -> param .)


state 59

    (28) param_pos -> empty .

    RIGHTPAREN      reduce using rule 28 (param_pos -> empty .)


state 60

    (29) param -> type_simple . ID param_more

    ID              shift and go to state 66


state 61

    (11) vars_simple_arr -> LEFTKEY CTEI RIGHTKEY . vars_simple_arr2
    (13) vars_simple_arr2 -> . LEFTKEY CTEI RIGHTKEY
    (14) vars_simple_arr2 -> . empty
    (96) empty -> .

    LEFTKEY         shift and go to state 67
    COMMA           reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)

    vars_simple_arr2               shift and go to state 68
    empty                          shift and go to state 69

state 62

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET . dec_vars dec_block RIGHTBRACKET
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (96) empty -> .

    VAR             shift and go to state 6
    ID              reduce using rule 96 (empty -> .)
    INCO            reduce using rule 96 (empty -> .)
    OUTCO           reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    RIGHTBRACKET    reduce using rule 96 (empty -> .)

    dec_vars                       shift and go to state 70
    empty                          shift and go to state 7

state 63

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE . COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    COLON           shift and go to state 71


state 64

    (72) dec_inherit -> COLON INHERIT ID .

    LEFTBRACKET     reduce using rule 72 (dec_inherit -> COLON INHERIT ID .)


state 65

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN . LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    LEFTBRACKET     shift and go to state 72


state 66

    (29) param -> type_simple ID . param_more
    (30) param_more -> . COMMA param
    (31) param_more -> . empty
    (96) empty -> .

    COMMA           shift and go to state 74
    RIGHTPAREN      reduce using rule 96 (empty -> .)

    param_more                     shift and go to state 73
    empty                          shift and go to state 75

state 67

    (13) vars_simple_arr2 -> LEFTKEY . CTEI RIGHTKEY

    CTEI            shift and go to state 76


state 68

    (11) vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .

    COMMA           reduce using rule 11 (vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .)
    SEMICOLON       reduce using rule 11 (vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .)


state 69

    (14) vars_simple_arr2 -> empty .

    COMMA           reduce using rule 14 (vars_simple_arr2 -> empty .)
    SEMICOLON       reduce using rule 14 (vars_simple_arr2 -> empty .)


state 70

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars . dec_block RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (96) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (74) dec_assign -> . ID COMP_EQUAL dec_exp SEMICOLON
    (75) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (81) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (82) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (87) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (90) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (91) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    RIGHTBRACKET    reduce using rule 96 (empty -> .)
    ID              shift and go to state 77
    INCO            shift and go to state 89
    OUTCO           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92

    dec_block                      shift and go to state 78
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88

state 71

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON . dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (96) empty -> .

    VAR             shift and go to state 6
    FUN             reduce using rule 96 (empty -> .)
    PUBLIC          reduce using rule 96 (empty -> .)

    dec_vars                       shift and go to state 93
    empty                          shift and go to state 7

state 72

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET . dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (96) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (74) dec_assign -> . ID COMP_EQUAL dec_exp SEMICOLON
    (75) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (81) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (82) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (87) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (90) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (91) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    RETURN          reduce using rule 96 (empty -> .)
    ID              shift and go to state 77
    INCO            shift and go to state 89
    OUTCO           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92

    dec_block                      shift and go to state 94
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88

state 73

    (29) param -> type_simple ID param_more .

    RIGHTPAREN      reduce using rule 29 (param -> type_simple ID param_more .)


state 74

    (30) param_more -> COMMA . param
    (29) param -> . type_simple ID param_more
    (19) type_simple -> . INT
    (20) type_simple -> . FLOAT
    (21) type_simple -> . CHAR

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    param                          shift and go to state 95
    type_simple                    shift and go to state 60

state 75

    (31) param_more -> empty .

    RIGHTPAREN      reduce using rule 31 (param_more -> empty .)


state 76

    (13) vars_simple_arr2 -> LEFTKEY CTEI . RIGHTKEY

    RIGHTKEY        shift and go to state 96


state 77

    (74) dec_assign -> ID . COMP_EQUAL dec_exp SEMICOLON
    (75) dec_call -> ID . LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (91) dec_method -> ID . DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    COMP_EQUAL      shift and go to state 97
    LEFTPAREN       shift and go to state 98
    DOT             shift and go to state 99


state 78

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 100


state 79

    (34) dec_block -> block .

    RIGHTBRACKET    reduce using rule 34 (dec_block -> block .)
    RETURN          reduce using rule 34 (dec_block -> block .)


state 80

    (35) dec_block -> empty .

    RIGHTBRACKET    reduce using rule 35 (dec_block -> empty .)
    RETURN          reduce using rule 35 (dec_block -> empty .)


state 81

    (36) block -> statement . block_more
    (37) block_more -> . block
    (38) block_more -> . empty
    (36) block -> . statement block_more
    (96) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (74) dec_assign -> . ID COMP_EQUAL dec_exp SEMICOLON
    (75) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (81) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (82) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (87) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (90) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (91) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    RIGHTBRACKET    reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)
    ID              shift and go to state 77
    INCO            shift and go to state 89
    OUTCO           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92

    statement                      shift and go to state 81
    block_more                     shift and go to state 101
    block                          shift and go to state 102
    empty                          shift and go to state 103
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88

state 82

    (39) statement -> dec_assign .

    ID              reduce using rule 39 (statement -> dec_assign .)
    INCO            reduce using rule 39 (statement -> dec_assign .)
    OUTCO           reduce using rule 39 (statement -> dec_assign .)
    IF              reduce using rule 39 (statement -> dec_assign .)
    WHILE           reduce using rule 39 (statement -> dec_assign .)
    RIGHTBRACKET    reduce using rule 39 (statement -> dec_assign .)
    RETURN          reduce using rule 39 (statement -> dec_assign .)


state 83

    (40) statement -> dec_call .

    ID              reduce using rule 40 (statement -> dec_call .)
    INCO            reduce using rule 40 (statement -> dec_call .)
    OUTCO           reduce using rule 40 (statement -> dec_call .)
    IF              reduce using rule 40 (statement -> dec_call .)
    WHILE           reduce using rule 40 (statement -> dec_call .)
    RIGHTBRACKET    reduce using rule 40 (statement -> dec_call .)
    RETURN          reduce using rule 40 (statement -> dec_call .)


state 84

    (41) statement -> dec_read .

    ID              reduce using rule 41 (statement -> dec_read .)
    INCO            reduce using rule 41 (statement -> dec_read .)
    OUTCO           reduce using rule 41 (statement -> dec_read .)
    IF              reduce using rule 41 (statement -> dec_read .)
    WHILE           reduce using rule 41 (statement -> dec_read .)
    RIGHTBRACKET    reduce using rule 41 (statement -> dec_read .)
    RETURN          reduce using rule 41 (statement -> dec_read .)


state 85

    (42) statement -> dec_write .

    ID              reduce using rule 42 (statement -> dec_write .)
    INCO            reduce using rule 42 (statement -> dec_write .)
    OUTCO           reduce using rule 42 (statement -> dec_write .)
    IF              reduce using rule 42 (statement -> dec_write .)
    WHILE           reduce using rule 42 (statement -> dec_write .)
    RIGHTBRACKET    reduce using rule 42 (statement -> dec_write .)
    RETURN          reduce using rule 42 (statement -> dec_write .)


state 86

    (43) statement -> dec_condition .

    ID              reduce using rule 43 (statement -> dec_condition .)
    INCO            reduce using rule 43 (statement -> dec_condition .)
    OUTCO           reduce using rule 43 (statement -> dec_condition .)
    IF              reduce using rule 43 (statement -> dec_condition .)
    WHILE           reduce using rule 43 (statement -> dec_condition .)
    RIGHTBRACKET    reduce using rule 43 (statement -> dec_condition .)
    RETURN          reduce using rule 43 (statement -> dec_condition .)


state 87

    (44) statement -> dec_cycle .

    ID              reduce using rule 44 (statement -> dec_cycle .)
    INCO            reduce using rule 44 (statement -> dec_cycle .)
    OUTCO           reduce using rule 44 (statement -> dec_cycle .)
    IF              reduce using rule 44 (statement -> dec_cycle .)
    WHILE           reduce using rule 44 (statement -> dec_cycle .)
    RIGHTBRACKET    reduce using rule 44 (statement -> dec_cycle .)
    RETURN          reduce using rule 44 (statement -> dec_cycle .)


state 88

    (45) statement -> dec_method .

    ID              reduce using rule 45 (statement -> dec_method .)
    INCO            reduce using rule 45 (statement -> dec_method .)
    OUTCO           reduce using rule 45 (statement -> dec_method .)
    IF              reduce using rule 45 (statement -> dec_method .)
    WHILE           reduce using rule 45 (statement -> dec_method .)
    RIGHTBRACKET    reduce using rule 45 (statement -> dec_method .)
    RETURN          reduce using rule 45 (statement -> dec_method .)


state 89

    (81) dec_read -> INCO . LEFTPAREN ID RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 104


state 90

    (82) dec_write -> OUTCO . LEFTPAREN write RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 105


state 91

    (87) dec_condition -> IF . LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else

    LEFTPAREN       shift and go to state 106


state 92

    (90) dec_cycle -> WHILE . LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET

    LEFTPAREN       shift and go to state 107


state 93

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars . dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (24) dec_fun -> . fun
    (25) dec_fun -> . empty
    (26) fun -> . FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (96) empty -> .

    FUN             shift and go to state 11
    PUBLIC          reduce using rule 96 (empty -> .)

    dec_fun                        shift and go to state 108
    fun                            shift and go to state 9
    empty                          shift and go to state 10

state 94

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block . RETURN dec_exp_method SEMICOLON RIGHTBRACKET

    RETURN          shift and go to state 109


state 95

    (30) param_more -> COMMA param .

    RIGHTPAREN      reduce using rule 30 (param_more -> COMMA param .)


state 96

    (13) vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .

    COMMA           reduce using rule 13 (vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .)
    SEMICOLON       reduce using rule 13 (vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .)


state 97

    (74) dec_assign -> ID COMP_EQUAL . dec_exp SEMICOLON
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 111
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 98

    (75) dec_call -> ID LEFTPAREN . call_pos RIGHTPAREN SEMICOLON
    (76) call_pos -> . call
    (77) call_pos -> . empty
    (78) call -> . dec_exp call_more
    (96) empty -> .
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    RIGHTPAREN      reduce using rule 96 (empty -> .)
    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    call_pos                       shift and go to state 117
    call                           shift and go to state 118
    empty                          shift and go to state 119
    dec_exp                        shift and go to state 120
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 99

    (91) dec_method -> ID DOT . ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    ID              shift and go to state 121


state 100

    (1) program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON dec_vars dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars dec_block RIGHTBRACKET .)


state 101

    (36) block -> statement block_more .

    RIGHTBRACKET    reduce using rule 36 (block -> statement block_more .)
    RETURN          reduce using rule 36 (block -> statement block_more .)


state 102

    (37) block_more -> block .

    RIGHTBRACKET    reduce using rule 37 (block_more -> block .)
    RETURN          reduce using rule 37 (block_more -> block .)


state 103

    (38) block_more -> empty .

    RIGHTBRACKET    reduce using rule 38 (block_more -> empty .)
    RETURN          reduce using rule 38 (block_more -> empty .)


state 104

    (81) dec_read -> INCO LEFTPAREN . ID RIGHTPAREN SEMICOLON

    ID              shift and go to state 122


state 105

    (82) dec_write -> OUTCO LEFTPAREN . write RIGHTPAREN SEMICOLON
    (83) write -> . dec_exp write_more
    (84) write -> . var_cte write_more
    (46) dec_exp -> . dec_term pm_op
    (92) var_cte -> . ID
    (93) var_cte -> . CTEI
    (94) var_cte -> . CTEF
    (95) var_cte -> . SIGN
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 126
    CTEI            shift and go to state 127
    CTEF            shift and go to state 128
    SIGN            shift and go to state 129
    LEFTPAREN       shift and go to state 116

    write                          shift and go to state 123
    dec_exp                        shift and go to state 124
    var_cte                        shift and go to state 125
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 106

    (87) dec_condition -> IF LEFTPAREN . dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 130
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 107

    (90) dec_cycle -> WHILE LEFTPAREN . dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 131
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 108

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun . PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    PUBLIC          shift and go to state 132


state 109

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN . dec_exp_method SEMICOLON RIGHTBRACKET
    (50) dec_exp_method -> . dec_exp
    (51) dec_exp_method -> . empty
    (46) dec_exp -> . dec_term pm_op
    (96) empty -> .
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    SEMICOLON       reduce using rule 96 (empty -> .)
    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp_method                 shift and go to state 133
    dec_exp                        shift and go to state 134
    empty                          shift and go to state 135
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 110

    (56) dec_fact -> ID .

    TIMES           reduce using rule 56 (dec_fact -> ID .)
    DIVIDE          reduce using rule 56 (dec_fact -> ID .)
    PLUS            reduce using rule 56 (dec_fact -> ID .)
    MINUS           reduce using rule 56 (dec_fact -> ID .)
    SEMICOLON       reduce using rule 56 (dec_fact -> ID .)
    COMMA           reduce using rule 56 (dec_fact -> ID .)
    RIGHTPAREN      reduce using rule 56 (dec_fact -> ID .)
    COMP_LESS       reduce using rule 56 (dec_fact -> ID .)
    COMP_GREATER    reduce using rule 56 (dec_fact -> ID .)
    COMP_EQUAL      reduce using rule 56 (dec_fact -> ID .)
    COMP_NOTEQUAL   reduce using rule 56 (dec_fact -> ID .)
    COMP_AND        reduce using rule 56 (dec_fact -> ID .)
    COMP_OR         reduce using rule 56 (dec_fact -> ID .)


state 111

    (74) dec_assign -> ID COMP_EQUAL dec_exp . SEMICOLON

    SEMICOLON       shift and go to state 136


state 112

    (46) dec_exp -> dec_term . pm_op
    (47) pm_op -> . PLUS dec_exp
    (48) pm_op -> . MINUS dec_term
    (49) pm_op -> . empty
    (96) empty -> .

    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    SEMICOLON       reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RIGHTPAREN      reduce using rule 96 (empty -> .)
    COMP_LESS       reduce using rule 96 (empty -> .)
    COMP_GREATER    reduce using rule 96 (empty -> .)
    COMP_EQUAL      reduce using rule 96 (empty -> .)
    COMP_NOTEQUAL   reduce using rule 96 (empty -> .)
    COMP_AND        reduce using rule 96 (empty -> .)
    COMP_OR         reduce using rule 96 (empty -> .)

    pm_op                          shift and go to state 137
    empty                          shift and go to state 140

state 113

    (52) dec_term -> dec_fact . md_op
    (53) md_op -> . TIMES dec_term
    (54) md_op -> . DIVIDE dec_term
    (55) md_op -> . empty
    (96) empty -> .

    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RIGHTPAREN      reduce using rule 96 (empty -> .)
    COMP_LESS       reduce using rule 96 (empty -> .)
    COMP_GREATER    reduce using rule 96 (empty -> .)
    COMP_EQUAL      reduce using rule 96 (empty -> .)
    COMP_NOTEQUAL   reduce using rule 96 (empty -> .)
    COMP_AND        reduce using rule 96 (empty -> .)
    COMP_OR         reduce using rule 96 (empty -> .)

    md_op                          shift and go to state 141
    empty                          shift and go to state 144

state 114

    (57) dec_fact -> CTEF .

    TIMES           reduce using rule 57 (dec_fact -> CTEF .)
    DIVIDE          reduce using rule 57 (dec_fact -> CTEF .)
    PLUS            reduce using rule 57 (dec_fact -> CTEF .)
    MINUS           reduce using rule 57 (dec_fact -> CTEF .)
    SEMICOLON       reduce using rule 57 (dec_fact -> CTEF .)
    COMMA           reduce using rule 57 (dec_fact -> CTEF .)
    RIGHTPAREN      reduce using rule 57 (dec_fact -> CTEF .)
    COMP_LESS       reduce using rule 57 (dec_fact -> CTEF .)
    COMP_GREATER    reduce using rule 57 (dec_fact -> CTEF .)
    COMP_EQUAL      reduce using rule 57 (dec_fact -> CTEF .)
    COMP_NOTEQUAL   reduce using rule 57 (dec_fact -> CTEF .)
    COMP_AND        reduce using rule 57 (dec_fact -> CTEF .)
    COMP_OR         reduce using rule 57 (dec_fact -> CTEF .)


state 115

    (58) dec_fact -> CTEI .

    TIMES           reduce using rule 58 (dec_fact -> CTEI .)
    DIVIDE          reduce using rule 58 (dec_fact -> CTEI .)
    PLUS            reduce using rule 58 (dec_fact -> CTEI .)
    MINUS           reduce using rule 58 (dec_fact -> CTEI .)
    SEMICOLON       reduce using rule 58 (dec_fact -> CTEI .)
    COMMA           reduce using rule 58 (dec_fact -> CTEI .)
    RIGHTPAREN      reduce using rule 58 (dec_fact -> CTEI .)
    COMP_LESS       reduce using rule 58 (dec_fact -> CTEI .)
    COMP_GREATER    reduce using rule 58 (dec_fact -> CTEI .)
    COMP_EQUAL      reduce using rule 58 (dec_fact -> CTEI .)
    COMP_NOTEQUAL   reduce using rule 58 (dec_fact -> CTEI .)
    COMP_AND        reduce using rule 58 (dec_fact -> CTEI .)
    COMP_OR         reduce using rule 58 (dec_fact -> CTEI .)


state 116

    (59) dec_fact -> LEFTPAREN . h_exp RIGHTPAREN
    (60) h_exp -> . s_exp ao_op
    (64) s_exp -> . dec_exp comp_op
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    h_exp                          shift and go to state 145
    s_exp                          shift and go to state 146
    dec_exp                        shift and go to state 147
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 117

    (75) dec_call -> ID LEFTPAREN call_pos . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 148


state 118

    (76) call_pos -> call .

    RIGHTPAREN      reduce using rule 76 (call_pos -> call .)


state 119

    (77) call_pos -> empty .

    RIGHTPAREN      reduce using rule 77 (call_pos -> empty .)


state 120

    (78) call -> dec_exp . call_more
    (79) call_more -> . COMMA call
    (80) call_more -> . empty
    (96) empty -> .

    COMMA           shift and go to state 150
    RIGHTPAREN      reduce using rule 96 (empty -> .)

    call_more                      shift and go to state 149
    empty                          shift and go to state 151

state 121

    (91) dec_method -> ID DOT ID . LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 152


state 122

    (81) dec_read -> INCO LEFTPAREN ID . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 153


state 123

    (82) dec_write -> OUTCO LEFTPAREN write . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 154


state 124

    (83) write -> dec_exp . write_more
    (85) write_more -> . COMMA write
    (86) write_more -> . empty
    (96) empty -> .

    COMMA           shift and go to state 156
    RIGHTPAREN      reduce using rule 96 (empty -> .)

    write_more                     shift and go to state 155
    empty                          shift and go to state 157

state 125

    (84) write -> var_cte . write_more
    (85) write_more -> . COMMA write
    (86) write_more -> . empty
    (96) empty -> .

    COMMA           shift and go to state 156
    RIGHTPAREN      reduce using rule 96 (empty -> .)

    write_more                     shift and go to state 158
    empty                          shift and go to state 157

state 126

    (92) var_cte -> ID .
    (56) dec_fact -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 56 (dec_fact -> ID .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 56 (dec_fact -> ID .)
    TIMES           reduce using rule 56 (dec_fact -> ID .)
    DIVIDE          reduce using rule 56 (dec_fact -> ID .)
    PLUS            reduce using rule 56 (dec_fact -> ID .)
    MINUS           reduce using rule 56 (dec_fact -> ID .)
    COMMA           reduce using rule 56 (dec_fact -> ID .)
    RIGHTPAREN      reduce using rule 56 (dec_fact -> ID .)

  ! COMMA           [ reduce using rule 92 (var_cte -> ID .) ]
  ! RIGHTPAREN      [ reduce using rule 92 (var_cte -> ID .) ]


state 127

    (93) var_cte -> CTEI .
    (58) dec_fact -> CTEI .

  ! reduce/reduce conflict for COMMA resolved using rule 58 (dec_fact -> CTEI .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 58 (dec_fact -> CTEI .)
    TIMES           reduce using rule 58 (dec_fact -> CTEI .)
    DIVIDE          reduce using rule 58 (dec_fact -> CTEI .)
    PLUS            reduce using rule 58 (dec_fact -> CTEI .)
    MINUS           reduce using rule 58 (dec_fact -> CTEI .)
    COMMA           reduce using rule 58 (dec_fact -> CTEI .)
    RIGHTPAREN      reduce using rule 58 (dec_fact -> CTEI .)

  ! COMMA           [ reduce using rule 93 (var_cte -> CTEI .) ]
  ! RIGHTPAREN      [ reduce using rule 93 (var_cte -> CTEI .) ]


state 128

    (94) var_cte -> CTEF .
    (57) dec_fact -> CTEF .

  ! reduce/reduce conflict for COMMA resolved using rule 57 (dec_fact -> CTEF .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 57 (dec_fact -> CTEF .)
    TIMES           reduce using rule 57 (dec_fact -> CTEF .)
    DIVIDE          reduce using rule 57 (dec_fact -> CTEF .)
    PLUS            reduce using rule 57 (dec_fact -> CTEF .)
    MINUS           reduce using rule 57 (dec_fact -> CTEF .)
    COMMA           reduce using rule 57 (dec_fact -> CTEF .)
    RIGHTPAREN      reduce using rule 57 (dec_fact -> CTEF .)

  ! COMMA           [ reduce using rule 94 (var_cte -> CTEF .) ]
  ! RIGHTPAREN      [ reduce using rule 94 (var_cte -> CTEF .) ]


state 129

    (95) var_cte -> SIGN .

    COMMA           reduce using rule 95 (var_cte -> SIGN .)
    RIGHTPAREN      reduce using rule 95 (var_cte -> SIGN .)


state 130

    (87) dec_condition -> IF LEFTPAREN dec_exp . RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else

    RIGHTPAREN      shift and go to state 159


state 131

    (90) dec_cycle -> WHILE LEFTPAREN dec_exp . RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET

    RIGHTPAREN      shift and go to state 160


state 132

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC . COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON

    COLON           shift and go to state 161


state 133

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method . SEMICOLON RIGHTBRACKET

    SEMICOLON       shift and go to state 162


state 134

    (50) dec_exp_method -> dec_exp .

    SEMICOLON       reduce using rule 50 (dec_exp_method -> dec_exp .)
    RIGHTPAREN      reduce using rule 50 (dec_exp_method -> dec_exp .)


state 135

    (51) dec_exp_method -> empty .

    SEMICOLON       reduce using rule 51 (dec_exp_method -> empty .)
    RIGHTPAREN      reduce using rule 51 (dec_exp_method -> empty .)


state 136

    (74) dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .

    ID              reduce using rule 74 (dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .)
    INCO            reduce using rule 74 (dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .)
    OUTCO           reduce using rule 74 (dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .)
    IF              reduce using rule 74 (dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .)
    WHILE           reduce using rule 74 (dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .)
    RIGHTBRACKET    reduce using rule 74 (dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .)
    RETURN          reduce using rule 74 (dec_assign -> ID COMP_EQUAL dec_exp SEMICOLON .)


state 137

    (46) dec_exp -> dec_term pm_op .

    SEMICOLON       reduce using rule 46 (dec_exp -> dec_term pm_op .)
    COMMA           reduce using rule 46 (dec_exp -> dec_term pm_op .)
    RIGHTPAREN      reduce using rule 46 (dec_exp -> dec_term pm_op .)
    COMP_LESS       reduce using rule 46 (dec_exp -> dec_term pm_op .)
    COMP_GREATER    reduce using rule 46 (dec_exp -> dec_term pm_op .)
    COMP_EQUAL      reduce using rule 46 (dec_exp -> dec_term pm_op .)
    COMP_NOTEQUAL   reduce using rule 46 (dec_exp -> dec_term pm_op .)
    COMP_AND        reduce using rule 46 (dec_exp -> dec_term pm_op .)
    COMP_OR         reduce using rule 46 (dec_exp -> dec_term pm_op .)


state 138

    (47) pm_op -> PLUS . dec_exp
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 163
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 139

    (48) pm_op -> MINUS . dec_term
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_term                       shift and go to state 164
    dec_fact                       shift and go to state 113

state 140

    (49) pm_op -> empty .

    SEMICOLON       reduce using rule 49 (pm_op -> empty .)
    COMMA           reduce using rule 49 (pm_op -> empty .)
    RIGHTPAREN      reduce using rule 49 (pm_op -> empty .)
    COMP_LESS       reduce using rule 49 (pm_op -> empty .)
    COMP_GREATER    reduce using rule 49 (pm_op -> empty .)
    COMP_EQUAL      reduce using rule 49 (pm_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 49 (pm_op -> empty .)
    COMP_AND        reduce using rule 49 (pm_op -> empty .)
    COMP_OR         reduce using rule 49 (pm_op -> empty .)


state 141

    (52) dec_term -> dec_fact md_op .

    PLUS            reduce using rule 52 (dec_term -> dec_fact md_op .)
    MINUS           reduce using rule 52 (dec_term -> dec_fact md_op .)
    SEMICOLON       reduce using rule 52 (dec_term -> dec_fact md_op .)
    COMMA           reduce using rule 52 (dec_term -> dec_fact md_op .)
    RIGHTPAREN      reduce using rule 52 (dec_term -> dec_fact md_op .)
    COMP_LESS       reduce using rule 52 (dec_term -> dec_fact md_op .)
    COMP_GREATER    reduce using rule 52 (dec_term -> dec_fact md_op .)
    COMP_EQUAL      reduce using rule 52 (dec_term -> dec_fact md_op .)
    COMP_NOTEQUAL   reduce using rule 52 (dec_term -> dec_fact md_op .)
    COMP_AND        reduce using rule 52 (dec_term -> dec_fact md_op .)
    COMP_OR         reduce using rule 52 (dec_term -> dec_fact md_op .)


state 142

    (53) md_op -> TIMES . dec_term
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_term                       shift and go to state 165
    dec_fact                       shift and go to state 113

state 143

    (54) md_op -> DIVIDE . dec_term
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_term                       shift and go to state 166
    dec_fact                       shift and go to state 113

state 144

    (55) md_op -> empty .

    PLUS            reduce using rule 55 (md_op -> empty .)
    MINUS           reduce using rule 55 (md_op -> empty .)
    SEMICOLON       reduce using rule 55 (md_op -> empty .)
    COMMA           reduce using rule 55 (md_op -> empty .)
    RIGHTPAREN      reduce using rule 55 (md_op -> empty .)
    COMP_LESS       reduce using rule 55 (md_op -> empty .)
    COMP_GREATER    reduce using rule 55 (md_op -> empty .)
    COMP_EQUAL      reduce using rule 55 (md_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 55 (md_op -> empty .)
    COMP_AND        reduce using rule 55 (md_op -> empty .)
    COMP_OR         reduce using rule 55 (md_op -> empty .)


state 145

    (59) dec_fact -> LEFTPAREN h_exp . RIGHTPAREN

    RIGHTPAREN      shift and go to state 167


state 146

    (60) h_exp -> s_exp . ao_op
    (61) ao_op -> . COMP_AND h_exp
    (62) ao_op -> . COMP_OR h_exp
    (63) ao_op -> . empty
    (96) empty -> .

    COMP_AND        shift and go to state 169
    COMP_OR         shift and go to state 170
    RIGHTPAREN      reduce using rule 96 (empty -> .)

    ao_op                          shift and go to state 168
    empty                          shift and go to state 171

state 147

    (64) s_exp -> dec_exp . comp_op
    (65) comp_op -> . COMP_LESS dec_exp
    (66) comp_op -> . COMP_GREATER dec_exp
    (67) comp_op -> . COMP_EQUAL dec_exp
    (68) comp_op -> . COMP_NOTEQUAL dec_exp
    (69) comp_op -> . empty
    (96) empty -> .

    COMP_LESS       shift and go to state 173
    COMP_GREATER    shift and go to state 174
    COMP_EQUAL      shift and go to state 175
    COMP_NOTEQUAL   shift and go to state 176
    COMP_AND        reduce using rule 96 (empty -> .)
    COMP_OR         reduce using rule 96 (empty -> .)
    RIGHTPAREN      reduce using rule 96 (empty -> .)

    comp_op                        shift and go to state 172
    empty                          shift and go to state 177

state 148

    (75) dec_call -> ID LEFTPAREN call_pos RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 178


state 149

    (78) call -> dec_exp call_more .

    RIGHTPAREN      reduce using rule 78 (call -> dec_exp call_more .)


state 150

    (79) call_more -> COMMA . call
    (78) call -> . dec_exp call_more
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    call                           shift and go to state 179
    dec_exp                        shift and go to state 120
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 151

    (80) call_more -> empty .

    RIGHTPAREN      reduce using rule 80 (call_more -> empty .)


state 152

    (91) dec_method -> ID DOT ID LEFTPAREN . dec_exp_method RIGHTPAREN SEMICOLON
    (50) dec_exp_method -> . dec_exp
    (51) dec_exp_method -> . empty
    (46) dec_exp -> . dec_term pm_op
    (96) empty -> .
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    RIGHTPAREN      reduce using rule 96 (empty -> .)
    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp_method                 shift and go to state 180
    dec_exp                        shift and go to state 134
    empty                          shift and go to state 135
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 153

    (81) dec_read -> INCO LEFTPAREN ID RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 154

    (82) dec_write -> OUTCO LEFTPAREN write RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 155

    (83) write -> dec_exp write_more .

    RIGHTPAREN      reduce using rule 83 (write -> dec_exp write_more .)


state 156

    (85) write_more -> COMMA . write
    (83) write -> . dec_exp write_more
    (84) write -> . var_cte write_more
    (46) dec_exp -> . dec_term pm_op
    (92) var_cte -> . ID
    (93) var_cte -> . CTEI
    (94) var_cte -> . CTEF
    (95) var_cte -> . SIGN
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 126
    CTEI            shift and go to state 127
    CTEF            shift and go to state 128
    SIGN            shift and go to state 129
    LEFTPAREN       shift and go to state 116

    write                          shift and go to state 183
    dec_exp                        shift and go to state 124
    var_cte                        shift and go to state 125
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 157

    (86) write_more -> empty .

    RIGHTPAREN      reduce using rule 86 (write_more -> empty .)


state 158

    (84) write -> var_cte write_more .

    RIGHTPAREN      reduce using rule 84 (write -> var_cte write_more .)


state 159

    (87) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN . LEFTBRACKET dec_block RIGHTBRACKET dec_else

    LEFTBRACKET     shift and go to state 184


state 160

    (90) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN . LEFTBRACKET dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 185


state 161

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON . dec_vars dec_fun RIGHTBRACKET SEMICOLON
    (2) dec_vars -> . VAR vars SEMICOLON
    (3) dec_vars -> . empty
    (96) empty -> .

    VAR             shift and go to state 6
    FUN             reduce using rule 96 (empty -> .)
    RIGHTBRACKET    reduce using rule 96 (empty -> .)

    dec_vars                       shift and go to state 186
    empty                          shift and go to state 7

state 162

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 187


state 163

    (47) pm_op -> PLUS dec_exp .

    SEMICOLON       reduce using rule 47 (pm_op -> PLUS dec_exp .)
    COMMA           reduce using rule 47 (pm_op -> PLUS dec_exp .)
    RIGHTPAREN      reduce using rule 47 (pm_op -> PLUS dec_exp .)
    COMP_LESS       reduce using rule 47 (pm_op -> PLUS dec_exp .)
    COMP_GREATER    reduce using rule 47 (pm_op -> PLUS dec_exp .)
    COMP_EQUAL      reduce using rule 47 (pm_op -> PLUS dec_exp .)
    COMP_NOTEQUAL   reduce using rule 47 (pm_op -> PLUS dec_exp .)
    COMP_AND        reduce using rule 47 (pm_op -> PLUS dec_exp .)
    COMP_OR         reduce using rule 47 (pm_op -> PLUS dec_exp .)


state 164

    (48) pm_op -> MINUS dec_term .

    SEMICOLON       reduce using rule 48 (pm_op -> MINUS dec_term .)
    COMMA           reduce using rule 48 (pm_op -> MINUS dec_term .)
    RIGHTPAREN      reduce using rule 48 (pm_op -> MINUS dec_term .)
    COMP_LESS       reduce using rule 48 (pm_op -> MINUS dec_term .)
    COMP_GREATER    reduce using rule 48 (pm_op -> MINUS dec_term .)
    COMP_EQUAL      reduce using rule 48 (pm_op -> MINUS dec_term .)
    COMP_NOTEQUAL   reduce using rule 48 (pm_op -> MINUS dec_term .)
    COMP_AND        reduce using rule 48 (pm_op -> MINUS dec_term .)
    COMP_OR         reduce using rule 48 (pm_op -> MINUS dec_term .)


state 165

    (53) md_op -> TIMES dec_term .

    PLUS            reduce using rule 53 (md_op -> TIMES dec_term .)
    MINUS           reduce using rule 53 (md_op -> TIMES dec_term .)
    SEMICOLON       reduce using rule 53 (md_op -> TIMES dec_term .)
    COMMA           reduce using rule 53 (md_op -> TIMES dec_term .)
    RIGHTPAREN      reduce using rule 53 (md_op -> TIMES dec_term .)
    COMP_LESS       reduce using rule 53 (md_op -> TIMES dec_term .)
    COMP_GREATER    reduce using rule 53 (md_op -> TIMES dec_term .)
    COMP_EQUAL      reduce using rule 53 (md_op -> TIMES dec_term .)
    COMP_NOTEQUAL   reduce using rule 53 (md_op -> TIMES dec_term .)
    COMP_AND        reduce using rule 53 (md_op -> TIMES dec_term .)
    COMP_OR         reduce using rule 53 (md_op -> TIMES dec_term .)


state 166

    (54) md_op -> DIVIDE dec_term .

    PLUS            reduce using rule 54 (md_op -> DIVIDE dec_term .)
    MINUS           reduce using rule 54 (md_op -> DIVIDE dec_term .)
    SEMICOLON       reduce using rule 54 (md_op -> DIVIDE dec_term .)
    COMMA           reduce using rule 54 (md_op -> DIVIDE dec_term .)
    RIGHTPAREN      reduce using rule 54 (md_op -> DIVIDE dec_term .)
    COMP_LESS       reduce using rule 54 (md_op -> DIVIDE dec_term .)
    COMP_GREATER    reduce using rule 54 (md_op -> DIVIDE dec_term .)
    COMP_EQUAL      reduce using rule 54 (md_op -> DIVIDE dec_term .)
    COMP_NOTEQUAL   reduce using rule 54 (md_op -> DIVIDE dec_term .)
    COMP_AND        reduce using rule 54 (md_op -> DIVIDE dec_term .)
    COMP_OR         reduce using rule 54 (md_op -> DIVIDE dec_term .)


state 167

    (59) dec_fact -> LEFTPAREN h_exp RIGHTPAREN .

    TIMES           reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    DIVIDE          reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    PLUS            reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    MINUS           reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    SEMICOLON       reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMMA           reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_LESS       reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_GREATER    reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_EQUAL      reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_NOTEQUAL   reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_AND        reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_OR         reduce using rule 59 (dec_fact -> LEFTPAREN h_exp RIGHTPAREN .)


state 168

    (60) h_exp -> s_exp ao_op .

    RIGHTPAREN      reduce using rule 60 (h_exp -> s_exp ao_op .)


state 169

    (61) ao_op -> COMP_AND . h_exp
    (60) h_exp -> . s_exp ao_op
    (64) s_exp -> . dec_exp comp_op
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    h_exp                          shift and go to state 188
    s_exp                          shift and go to state 146
    dec_exp                        shift and go to state 147
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 170

    (62) ao_op -> COMP_OR . h_exp
    (60) h_exp -> . s_exp ao_op
    (64) s_exp -> . dec_exp comp_op
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    h_exp                          shift and go to state 189
    s_exp                          shift and go to state 146
    dec_exp                        shift and go to state 147
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 171

    (63) ao_op -> empty .

    RIGHTPAREN      reduce using rule 63 (ao_op -> empty .)


state 172

    (64) s_exp -> dec_exp comp_op .

    COMP_AND        reduce using rule 64 (s_exp -> dec_exp comp_op .)
    COMP_OR         reduce using rule 64 (s_exp -> dec_exp comp_op .)
    RIGHTPAREN      reduce using rule 64 (s_exp -> dec_exp comp_op .)


state 173

    (65) comp_op -> COMP_LESS . dec_exp
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 190
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 174

    (66) comp_op -> COMP_GREATER . dec_exp
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 191
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 175

    (67) comp_op -> COMP_EQUAL . dec_exp
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 192
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 176

    (68) comp_op -> COMP_NOTEQUAL . dec_exp
    (46) dec_exp -> . dec_term pm_op
    (52) dec_term -> . dec_fact md_op
    (56) dec_fact -> . ID
    (57) dec_fact -> . CTEF
    (58) dec_fact -> . CTEI
    (59) dec_fact -> . LEFTPAREN h_exp RIGHTPAREN

    ID              shift and go to state 110
    CTEF            shift and go to state 114
    CTEI            shift and go to state 115
    LEFTPAREN       shift and go to state 116

    dec_exp                        shift and go to state 193
    dec_term                       shift and go to state 112
    dec_fact                       shift and go to state 113

state 177

    (69) comp_op -> empty .

    COMP_AND        reduce using rule 69 (comp_op -> empty .)
    COMP_OR         reduce using rule 69 (comp_op -> empty .)
    RIGHTPAREN      reduce using rule 69 (comp_op -> empty .)


state 178

    (75) dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .

    ID              reduce using rule 75 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 75 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 75 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 75 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 75 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 75 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 75 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)


state 179

    (79) call_more -> COMMA call .

    RIGHTPAREN      reduce using rule 79 (call_more -> COMMA call .)


state 180

    (91) dec_method -> ID DOT ID LEFTPAREN dec_exp_method . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 194


state 181

    (81) dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .

    ID              reduce using rule 81 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 81 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 81 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 81 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 81 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 81 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 81 (dec_read -> INCO LEFTPAREN ID RIGHTPAREN SEMICOLON .)


state 182

    (82) dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .

    ID              reduce using rule 82 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 82 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 82 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 82 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 82 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 82 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 82 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)


state 183

    (85) write_more -> COMMA write .

    RIGHTPAREN      reduce using rule 85 (write_more -> COMMA write .)


state 184

    (87) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET . dec_block RIGHTBRACKET dec_else
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (96) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (74) dec_assign -> . ID COMP_EQUAL dec_exp SEMICOLON
    (75) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (81) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (82) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (87) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (90) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (91) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    RIGHTBRACKET    reduce using rule 96 (empty -> .)
    ID              shift and go to state 77
    INCO            shift and go to state 89
    OUTCO           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92

    dec_block                      shift and go to state 195
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88

state 185

    (90) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET . dec_block RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (96) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (74) dec_assign -> . ID COMP_EQUAL dec_exp SEMICOLON
    (75) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (81) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (82) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (87) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (90) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (91) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    RIGHTBRACKET    reduce using rule 96 (empty -> .)
    ID              shift and go to state 77
    INCO            shift and go to state 89
    OUTCO           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92

    dec_block                      shift and go to state 196
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88

state 186

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars . dec_fun RIGHTBRACKET SEMICOLON
    (24) dec_fun -> . fun
    (25) dec_fun -> . empty
    (26) fun -> . FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET
    (96) empty -> .

    FUN             shift and go to state 11
    RIGHTBRACKET    reduce using rule 96 (empty -> .)

    dec_fun                        shift and go to state 197
    fun                            shift and go to state 9
    empty                          shift and go to state 10

state 187

    (26) fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .

    CLASS           reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)
    MAIN            reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)
    PUBLIC          reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 26 (fun -> FUN fun_type ID LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_block RETURN dec_exp_method SEMICOLON RIGHTBRACKET .)


state 188

    (61) ao_op -> COMP_AND h_exp .

    RIGHTPAREN      reduce using rule 61 (ao_op -> COMP_AND h_exp .)


state 189

    (62) ao_op -> COMP_OR h_exp .

    RIGHTPAREN      reduce using rule 62 (ao_op -> COMP_OR h_exp .)


state 190

    (65) comp_op -> COMP_LESS dec_exp .

    COMP_AND        reduce using rule 65 (comp_op -> COMP_LESS dec_exp .)
    COMP_OR         reduce using rule 65 (comp_op -> COMP_LESS dec_exp .)
    RIGHTPAREN      reduce using rule 65 (comp_op -> COMP_LESS dec_exp .)


state 191

    (66) comp_op -> COMP_GREATER dec_exp .

    COMP_AND        reduce using rule 66 (comp_op -> COMP_GREATER dec_exp .)
    COMP_OR         reduce using rule 66 (comp_op -> COMP_GREATER dec_exp .)
    RIGHTPAREN      reduce using rule 66 (comp_op -> COMP_GREATER dec_exp .)


state 192

    (67) comp_op -> COMP_EQUAL dec_exp .

    COMP_AND        reduce using rule 67 (comp_op -> COMP_EQUAL dec_exp .)
    COMP_OR         reduce using rule 67 (comp_op -> COMP_EQUAL dec_exp .)
    RIGHTPAREN      reduce using rule 67 (comp_op -> COMP_EQUAL dec_exp .)


state 193

    (68) comp_op -> COMP_NOTEQUAL dec_exp .

    COMP_AND        reduce using rule 68 (comp_op -> COMP_NOTEQUAL dec_exp .)
    COMP_OR         reduce using rule 68 (comp_op -> COMP_NOTEQUAL dec_exp .)
    RIGHTPAREN      reduce using rule 68 (comp_op -> COMP_NOTEQUAL dec_exp .)


state 194

    (91) dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 198


state 195

    (87) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block . RIGHTBRACKET dec_else

    RIGHTBRACKET    shift and go to state 199


state 196

    (90) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 200


state 197

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun . RIGHTBRACKET SEMICOLON

    RIGHTBRACKET    shift and go to state 201


state 198

    (91) dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .

    ID              reduce using rule 91 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 91 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 91 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 91 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 91 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 91 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 91 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)


state 199

    (87) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET . dec_else
    (88) dec_else -> . ELSE LEFTBRACKET dec_block RIGHTBRACKET
    (89) dec_else -> . empty
    (96) empty -> .

    ELSE            shift and go to state 203
    ID              reduce using rule 96 (empty -> .)
    INCO            reduce using rule 96 (empty -> .)
    OUTCO           reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    RIGHTBRACKET    reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)

    dec_else                       shift and go to state 202
    empty                          shift and go to state 204

state 200

    (90) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .

    ID              reduce using rule 90 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    INCO            reduce using rule 90 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    OUTCO           reduce using rule 90 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    IF              reduce using rule 90 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    WHILE           reduce using rule 90 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 90 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    RETURN          reduce using rule 90 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)


state 201

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 205


state 202

    (87) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .

    ID              reduce using rule 87 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    INCO            reduce using rule 87 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    OUTCO           reduce using rule 87 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    IF              reduce using rule 87 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    WHILE           reduce using rule 87 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    RIGHTBRACKET    reduce using rule 87 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    RETURN          reduce using rule 87 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)


state 203

    (88) dec_else -> ELSE . LEFTBRACKET dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 206


state 204

    (89) dec_else -> empty .

    ID              reduce using rule 89 (dec_else -> empty .)
    INCO            reduce using rule 89 (dec_else -> empty .)
    OUTCO           reduce using rule 89 (dec_else -> empty .)
    IF              reduce using rule 89 (dec_else -> empty .)
    WHILE           reduce using rule 89 (dec_else -> empty .)
    RIGHTBRACKET    reduce using rule 89 (dec_else -> empty .)
    RETURN          reduce using rule 89 (dec_else -> empty .)


state 205

    (70) dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON .

    MAIN            reduce using rule 70 (dec_class -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars dec_fun PUBLIC COLON dec_vars dec_fun RIGHTBRACKET SEMICOLON .)


state 206

    (88) dec_else -> ELSE LEFTBRACKET . dec_block RIGHTBRACKET
    (34) dec_block -> . block
    (35) dec_block -> . empty
    (36) block -> . statement block_more
    (96) empty -> .
    (39) statement -> . dec_assign
    (40) statement -> . dec_call
    (41) statement -> . dec_read
    (42) statement -> . dec_write
    (43) statement -> . dec_condition
    (44) statement -> . dec_cycle
    (45) statement -> . dec_method
    (74) dec_assign -> . ID COMP_EQUAL dec_exp SEMICOLON
    (75) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (81) dec_read -> . INCO LEFTPAREN ID RIGHTPAREN SEMICOLON
    (82) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (87) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (90) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (91) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    RIGHTBRACKET    reduce using rule 96 (empty -> .)
    ID              shift and go to state 77
    INCO            shift and go to state 89
    OUTCO           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92

    dec_block                      shift and go to state 207
    block                          shift and go to state 79
    empty                          shift and go to state 80
    statement                      shift and go to state 81
    dec_assign                     shift and go to state 82
    dec_call                       shift and go to state 83
    dec_read                       shift and go to state 84
    dec_write                      shift and go to state 85
    dec_condition                  shift and go to state 86
    dec_cycle                      shift and go to state 87
    dec_method                     shift and go to state 88

state 207

    (88) dec_else -> ELSE LEFTBRACKET dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 208


state 208

    (88) dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .

    ID              reduce using rule 88 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    INCO            reduce using rule 88 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    OUTCO           reduce using rule 88 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    IF              reduce using rule 88 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    WHILE           reduce using rule 88 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 88 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    RETURN          reduce using rule 88 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 126 resolved using rule (dec_fact -> ID)
WARNING: rejected rule (var_cte -> ID) in state 126
WARNING: reduce/reduce conflict in state 127 resolved using rule (dec_fact -> CTEI)
WARNING: rejected rule (var_cte -> CTEI) in state 127
WARNING: reduce/reduce conflict in state 128 resolved using rule (dec_fact -> CTEF)
WARNING: rejected rule (var_cte -> CTEF) in state 128
WARNING: Rule (var_cte -> ID) is never reduced
WARNING: Rule (var_cte -> CTEI) is never reduced
WARNING: Rule (var_cte -> CTEF) is never reduced
