Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
Rule 2     dec_vars_mult -> dec_vars_idk
Rule 3     dec_vars_mult -> empty
Rule 4     dec_vars_idk -> dec_vars dec_vars_more
Rule 5     dec_vars_more -> dec_vars_idk
Rule 6     dec_vars_more -> empty
Rule 7     dec_vars -> VAR vars SEMICOLON
Rule 8     vars -> vars_simple
Rule 9     vars -> vars_complex
Rule 10    vars_simple -> type_simple vars_simple_dec
Rule 11    vars_simple_dec -> vars_simple_id vars_simple_more
Rule 12    vars_simple_more -> COMMA vars_simple_dec
Rule 13    vars_simple_more -> empty
Rule 14    vars_simple_id -> ID vars_simple_arr
Rule 15    vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2
Rule 16    vars_simple_arr -> empty
Rule 17    vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY
Rule 18    vars_simple_arr2 -> empty
Rule 19    vars_complex -> type_complex vars_complex_dec
Rule 20    vars_complex_dec -> ID vars_complex_more
Rule 21    vars_complex_more -> COMMA vars_complex_dec
Rule 22    vars_complex_more -> empty
Rule 23    type_simple -> INT
Rule 24    type_simple -> FLOAT
Rule 25    type_simple -> CHAR
Rule 26    type_complex -> FILE
Rule 27    type_complex -> ID
Rule 28    dec_fun -> dec_fun_idk
Rule 29    dec_fun -> empty
Rule 30    dec_fun_idk -> fun dec_fun_more
Rule 31    dec_fun_more -> dec_fun_idk
Rule 32    dec_fun_more -> empty
Rule 33    fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
Rule 34    param_pos -> param
Rule 35    param_pos -> empty
Rule 36    param -> type_simple ID param_more
Rule 37    param_more -> COMMA param
Rule 38    param_more -> empty
Rule 39    fun_type -> type_simple
Rule 40    fun_type -> VOID
Rule 41    fun_return -> RETURN dec_exp_method SEMICOLON
Rule 42    dec_block -> block
Rule 43    dec_block -> empty
Rule 44    block -> statement block_more
Rule 45    block_more -> block
Rule 46    block_more -> empty
Rule 47    statement -> dec_assign
Rule 48    statement -> dec_call
Rule 49    statement -> dec_read
Rule 50    statement -> dec_write
Rule 51    statement -> dec_condition
Rule 52    statement -> dec_cycle
Rule 53    statement -> dec_method
Rule 54    statement -> fun_return
Rule 55    dec_exp -> dec_exp_s
Rule 56    dec_exp_s -> dec_term pm_op
Rule 57    pm_op -> PLUS dec_exp_s
Rule 58    pm_op -> MINUS dec_exp_s
Rule 59    pm_op -> empty
Rule 60    dec_exp_method -> dec_exp_s
Rule 61    dec_exp_method -> empty
Rule 62    dec_term -> dec_fact md_op
Rule 63    md_op -> TIMES dec_term
Rule 64    md_op -> DIVIDE dec_term
Rule 65    md_op -> empty
Rule 66    dec_fact -> var_cte
Rule 67    dec_fact -> hyper_call
Rule 68    hyper_call -> h_exp
Rule 69    hyper_call -> LEFTPAREN h_exp RIGHTPAREN
Rule 70    h_exp -> s_exp ao_op
Rule 71    ao_op -> COMP_AND h_exp
Rule 72    ao_op -> COMP_OR h_exp
Rule 73    ao_op -> empty
Rule 74    s_exp -> dec_exp_s comp_op
Rule 75    comp_op -> COMP_LESS s_exp
Rule 76    comp_op -> COMP_GREATER s_exp
Rule 77    comp_op -> COMP_EQUAL s_exp
Rule 78    comp_op -> COMP_NOTEQUAL s_exp
Rule 79    comp_op -> empty
Rule 80    dec_class -> dec_class_idk
Rule 81    dec_class -> empty
Rule 82    dec_class_idk -> class_body dec_class_more
Rule 83    dec_class_more -> dec_class_idk
Rule 84    dec_class_more -> empty
Rule 85    class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON
Rule 86    dec_inherit -> COLON INHERIT ID
Rule 87    dec_inherit -> empty
Rule 88    dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON
Rule 89    dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
Rule 90    dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN
Rule 91    call_pos -> call
Rule 92    call_pos -> empty
Rule 93    call -> dec_exp call_more
Rule 94    call_more -> COMMA call
Rule 95    call_more -> empty
Rule 96    dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON
Rule 97    dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
Rule 98    write -> dec_exp write_more
Rule 99    write_more -> COMMA write
Rule 100   write_more -> empty
Rule 101   dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
Rule 102   dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET
Rule 103   dec_else -> empty
Rule 104   dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
Rule 105   dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
Rule 106   var_cte -> var_id
Rule 107   var_cte -> dec_call_exp
Rule 108   var_cte -> var_const
Rule 109   var_const -> CTEI
Rule 110   var_const -> CTEF
Rule 111   var_const -> CHAR_DEC
Rule 112   var_id -> ID
Rule 113   var_id -> ID LEFTKEY dec_exp RIGHTKEY
Rule 114   var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
Rule 115   fun_id -> ID
Rule 116   empty -> <empty>

Terminals, with rules where they appear

CHAR                 : 25
CHAR_DEC             : 111
CLASS                : 85
COLON                : 85 85 86
COMMA                : 12 21 37 94 99
COMP_AND             : 71
COMP_EQUAL           : 77 88
COMP_GREATER         : 76
COMP_LESS            : 75
COMP_NOTEQUAL        : 78
COMP_OR              : 72
CTEF                 : 110
CTEI                 : 15 17 109
DIVIDE               : 64
DOT                  : 105
ELSE                 : 102
FILE                 : 26
FLOAT                : 24
FUN                  : 33
ID                   : 1 14 20 27 36 85 86 89 90 105 105 112 113 114 115
IF                   : 101
INCO                 : 96
INHERIT              : 86
INT                  : 23
LEFTBRACKET          : 1 33 85 101 102 104
LEFTKEY              : 15 17 113 114 114
LEFTPAREN            : 1 33 69 89 90 96 97 101 104 105
MAIN                 : 1
MINUS                : 58
OUTCO                : 97
PLUS                 : 57
PRIVATE              : 85
PROGRAM              : 1
PUBLIC               : 85
RETURN               : 41
RIGHTBRACKET         : 1 33 85 101 102 104
RIGHTKEY             : 15 17 113 114 114
RIGHTPAREN           : 1 33 69 89 90 96 97 101 104 105
SEMICOLON            : 1 7 41 85 88 89 96 97 105
SIGN                 : 
TIMES                : 63
VAR                  : 7
VOID                 : 40
WHILE                : 104
error                : 

Nonterminals, with rules where they appear

ao_op                : 70
block                : 42 45
block_more           : 44
call                 : 91 94
call_more            : 93
call_pos             : 89 90
class_body           : 82
comp_op              : 74
dec_assign           : 47
dec_block            : 1 33 101 102 104
dec_call             : 48
dec_call_exp         : 107
dec_class            : 1
dec_class_idk        : 80 83
dec_class_more       : 82
dec_condition        : 51
dec_cycle            : 52
dec_else             : 101
dec_exp              : 88 93 98 101 104 113 114 114
dec_exp_method       : 41 105
dec_exp_s            : 55 57 58 60 74
dec_fact             : 62
dec_fun              : 1 85 85
dec_fun_idk          : 28 31
dec_fun_more         : 30
dec_inherit          : 85
dec_method           : 53
dec_read             : 49
dec_term             : 56 63 64
dec_vars             : 4
dec_vars_idk         : 2 5
dec_vars_more        : 4
dec_vars_mult        : 1 1 33 85 85
dec_write            : 50
empty                : 3 6 13 16 18 22 29 32 35 38 43 46 59 61 65 73 79 81 84 87 92 95 100 103
fun                  : 30
fun_id               : 33
fun_return           : 54
fun_type             : 33
h_exp                : 68 69 71 72
hyper_call           : 67
md_op                : 62
param                : 34 37
param_more           : 36
param_pos            : 33
pm_op                : 56
program              : 0
s_exp                : 70 75 76 77 78
statement            : 44
type_complex         : 19
type_simple          : 10 36 39
var_const            : 108
var_cte              : 66
var_id               : 88 96 106
vars                 : 7
vars_complex         : 9
vars_complex_dec     : 19 21
vars_complex_more    : 20
vars_simple          : 8
vars_simple_arr      : 14
vars_simple_arr2     : 15
vars_simple_dec      : 10 12
vars_simple_id       : 11
vars_simple_more     : 11
write                : 97 99
write_more           : 98

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
    (2) dec_vars_mult -> . dec_vars_idk
    (3) dec_vars_mult -> . empty
    (4) dec_vars_idk -> . dec_vars dec_vars_more
    (116) empty -> .
    (7) dec_vars -> . VAR vars SEMICOLON

    FUN             reduce using rule 116 (empty -> .)
    CLASS           reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    VAR             shift and go to state 9

    dec_vars_mult                  shift and go to state 5
    dec_vars_idk                   shift and go to state 6
    empty                          shift and go to state 7
    dec_vars                       shift and go to state 8

state 5

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult . dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
    (28) dec_fun -> . dec_fun_idk
    (29) dec_fun -> . empty
    (30) dec_fun_idk -> . fun dec_fun_more
    (116) empty -> .
    (33) fun -> . FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    CLASS           reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    FUN             shift and go to state 14

    dec_fun                        shift and go to state 10
    dec_fun_idk                    shift and go to state 11
    empty                          shift and go to state 12
    fun                            shift and go to state 13

state 6

    (2) dec_vars_mult -> dec_vars_idk .

    FUN             reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    CLASS           reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    MAIN            reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    ID              reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    INCO            reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    OUTCO           reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    IF              reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    WHILE           reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    RETURN          reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    RIGHTBRACKET    reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)
    PUBLIC          reduce using rule 2 (dec_vars_mult -> dec_vars_idk .)


state 7

    (3) dec_vars_mult -> empty .

    FUN             reduce using rule 3 (dec_vars_mult -> empty .)
    CLASS           reduce using rule 3 (dec_vars_mult -> empty .)
    MAIN            reduce using rule 3 (dec_vars_mult -> empty .)
    ID              reduce using rule 3 (dec_vars_mult -> empty .)
    INCO            reduce using rule 3 (dec_vars_mult -> empty .)
    OUTCO           reduce using rule 3 (dec_vars_mult -> empty .)
    IF              reduce using rule 3 (dec_vars_mult -> empty .)
    WHILE           reduce using rule 3 (dec_vars_mult -> empty .)
    RETURN          reduce using rule 3 (dec_vars_mult -> empty .)
    RIGHTBRACKET    reduce using rule 3 (dec_vars_mult -> empty .)
    PUBLIC          reduce using rule 3 (dec_vars_mult -> empty .)


state 8

    (4) dec_vars_idk -> dec_vars . dec_vars_more
    (5) dec_vars_more -> . dec_vars_idk
    (6) dec_vars_more -> . empty
    (4) dec_vars_idk -> . dec_vars dec_vars_more
    (116) empty -> .
    (7) dec_vars -> . VAR vars SEMICOLON

    FUN             reduce using rule 116 (empty -> .)
    CLASS           reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    INCO            reduce using rule 116 (empty -> .)
    OUTCO           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 9

    dec_vars                       shift and go to state 8
    dec_vars_more                  shift and go to state 15
    dec_vars_idk                   shift and go to state 16
    empty                          shift and go to state 17

state 9

    (7) dec_vars -> VAR . vars SEMICOLON
    (8) vars -> . vars_simple
    (9) vars -> . vars_complex
    (10) vars_simple -> . type_simple vars_simple_dec
    (19) vars_complex -> . type_complex vars_complex_dec
    (23) type_simple -> . INT
    (24) type_simple -> . FLOAT
    (25) type_simple -> . CHAR
    (26) type_complex -> . FILE
    (27) type_complex -> . ID

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    FILE            shift and go to state 26
    ID              shift and go to state 27

    vars                           shift and go to state 18
    vars_simple                    shift and go to state 19
    vars_complex                   shift and go to state 20
    type_simple                    shift and go to state 21
    type_complex                   shift and go to state 22

state 10

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun . dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
    (80) dec_class -> . dec_class_idk
    (81) dec_class -> . empty
    (82) dec_class_idk -> . class_body dec_class_more
    (116) empty -> .
    (85) class_body -> . CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    MAIN            reduce using rule 116 (empty -> .)
    CLASS           shift and go to state 32

    dec_class                      shift and go to state 28
    dec_class_idk                  shift and go to state 29
    empty                          shift and go to state 30
    class_body                     shift and go to state 31

state 11

    (28) dec_fun -> dec_fun_idk .

    CLASS           reduce using rule 28 (dec_fun -> dec_fun_idk .)
    MAIN            reduce using rule 28 (dec_fun -> dec_fun_idk .)
    PUBLIC          reduce using rule 28 (dec_fun -> dec_fun_idk .)
    RIGHTBRACKET    reduce using rule 28 (dec_fun -> dec_fun_idk .)


state 12

    (29) dec_fun -> empty .

    CLASS           reduce using rule 29 (dec_fun -> empty .)
    MAIN            reduce using rule 29 (dec_fun -> empty .)
    PUBLIC          reduce using rule 29 (dec_fun -> empty .)
    RIGHTBRACKET    reduce using rule 29 (dec_fun -> empty .)


state 13

    (30) dec_fun_idk -> fun . dec_fun_more
    (31) dec_fun_more -> . dec_fun_idk
    (32) dec_fun_more -> . empty
    (30) dec_fun_idk -> . fun dec_fun_more
    (116) empty -> .
    (33) fun -> . FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    CLASS           reduce using rule 116 (empty -> .)
    MAIN            reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    FUN             shift and go to state 14

    fun                            shift and go to state 13
    dec_fun_more                   shift and go to state 33
    dec_fun_idk                    shift and go to state 34
    empty                          shift and go to state 35

state 14

    (33) fun -> FUN . fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
    (39) fun_type -> . type_simple
    (40) fun_type -> . VOID
    (23) type_simple -> . INT
    (24) type_simple -> . FLOAT
    (25) type_simple -> . CHAR

    VOID            shift and go to state 38
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    fun_type                       shift and go to state 36
    type_simple                    shift and go to state 37

state 15

    (4) dec_vars_idk -> dec_vars dec_vars_more .

    FUN             reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    CLASS           reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    MAIN            reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    ID              reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    INCO            reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    OUTCO           reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    IF              reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    WHILE           reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    RETURN          reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    RIGHTBRACKET    reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)
    PUBLIC          reduce using rule 4 (dec_vars_idk -> dec_vars dec_vars_more .)


state 16

    (5) dec_vars_more -> dec_vars_idk .

    FUN             reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    CLASS           reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    MAIN            reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    ID              reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    INCO            reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    OUTCO           reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    IF              reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    WHILE           reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    RETURN          reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    RIGHTBRACKET    reduce using rule 5 (dec_vars_more -> dec_vars_idk .)
    PUBLIC          reduce using rule 5 (dec_vars_more -> dec_vars_idk .)


state 17

    (6) dec_vars_more -> empty .

    FUN             reduce using rule 6 (dec_vars_more -> empty .)
    CLASS           reduce using rule 6 (dec_vars_more -> empty .)
    MAIN            reduce using rule 6 (dec_vars_more -> empty .)
    ID              reduce using rule 6 (dec_vars_more -> empty .)
    INCO            reduce using rule 6 (dec_vars_more -> empty .)
    OUTCO           reduce using rule 6 (dec_vars_more -> empty .)
    IF              reduce using rule 6 (dec_vars_more -> empty .)
    WHILE           reduce using rule 6 (dec_vars_more -> empty .)
    RETURN          reduce using rule 6 (dec_vars_more -> empty .)
    RIGHTBRACKET    reduce using rule 6 (dec_vars_more -> empty .)
    PUBLIC          reduce using rule 6 (dec_vars_more -> empty .)


state 18

    (7) dec_vars -> VAR vars . SEMICOLON

    SEMICOLON       shift and go to state 39


state 19

    (8) vars -> vars_simple .

    SEMICOLON       reduce using rule 8 (vars -> vars_simple .)


state 20

    (9) vars -> vars_complex .

    SEMICOLON       reduce using rule 9 (vars -> vars_complex .)


state 21

    (10) vars_simple -> type_simple . vars_simple_dec
    (11) vars_simple_dec -> . vars_simple_id vars_simple_more
    (14) vars_simple_id -> . ID vars_simple_arr

    ID              shift and go to state 42

    vars_simple_dec                shift and go to state 40
    vars_simple_id                 shift and go to state 41

state 22

    (19) vars_complex -> type_complex . vars_complex_dec
    (20) vars_complex_dec -> . ID vars_complex_more

    ID              shift and go to state 44

    vars_complex_dec               shift and go to state 43

state 23

    (23) type_simple -> INT .

    ID              reduce using rule 23 (type_simple -> INT .)


state 24

    (24) type_simple -> FLOAT .

    ID              reduce using rule 24 (type_simple -> FLOAT .)


state 25

    (25) type_simple -> CHAR .

    ID              reduce using rule 25 (type_simple -> CHAR .)


state 26

    (26) type_complex -> FILE .

    ID              reduce using rule 26 (type_complex -> FILE .)


state 27

    (27) type_complex -> ID .

    ID              reduce using rule 27 (type_complex -> ID .)


state 28

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class . MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    MAIN            shift and go to state 45


state 29

    (80) dec_class -> dec_class_idk .

    MAIN            reduce using rule 80 (dec_class -> dec_class_idk .)


state 30

    (81) dec_class -> empty .

    MAIN            reduce using rule 81 (dec_class -> empty .)


state 31

    (82) dec_class_idk -> class_body . dec_class_more
    (83) dec_class_more -> . dec_class_idk
    (84) dec_class_more -> . empty
    (82) dec_class_idk -> . class_body dec_class_more
    (116) empty -> .
    (85) class_body -> . CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    MAIN            reduce using rule 116 (empty -> .)
    CLASS           shift and go to state 32

    class_body                     shift and go to state 31
    dec_class_more                 shift and go to state 46
    dec_class_idk                  shift and go to state 47
    empty                          shift and go to state 48

state 32

    (85) class_body -> CLASS . ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    ID              shift and go to state 49


state 33

    (30) dec_fun_idk -> fun dec_fun_more .

    CLASS           reduce using rule 30 (dec_fun_idk -> fun dec_fun_more .)
    MAIN            reduce using rule 30 (dec_fun_idk -> fun dec_fun_more .)
    PUBLIC          reduce using rule 30 (dec_fun_idk -> fun dec_fun_more .)
    RIGHTBRACKET    reduce using rule 30 (dec_fun_idk -> fun dec_fun_more .)


state 34

    (31) dec_fun_more -> dec_fun_idk .

    CLASS           reduce using rule 31 (dec_fun_more -> dec_fun_idk .)
    MAIN            reduce using rule 31 (dec_fun_more -> dec_fun_idk .)
    PUBLIC          reduce using rule 31 (dec_fun_more -> dec_fun_idk .)
    RIGHTBRACKET    reduce using rule 31 (dec_fun_more -> dec_fun_idk .)


state 35

    (32) dec_fun_more -> empty .

    CLASS           reduce using rule 32 (dec_fun_more -> empty .)
    MAIN            reduce using rule 32 (dec_fun_more -> empty .)
    PUBLIC          reduce using rule 32 (dec_fun_more -> empty .)
    RIGHTBRACKET    reduce using rule 32 (dec_fun_more -> empty .)


state 36

    (33) fun -> FUN fun_type . fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
    (115) fun_id -> . ID

    ID              shift and go to state 51

    fun_id                         shift and go to state 50

state 37

    (39) fun_type -> type_simple .

    ID              reduce using rule 39 (fun_type -> type_simple .)


state 38

    (40) fun_type -> VOID .

    ID              reduce using rule 40 (fun_type -> VOID .)


state 39

    (7) dec_vars -> VAR vars SEMICOLON .

    VAR             reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    FUN             reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    CLASS           reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    MAIN            reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    ID              reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    INCO            reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    OUTCO           reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    IF              reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    WHILE           reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    RETURN          reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    RIGHTBRACKET    reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)
    PUBLIC          reduce using rule 7 (dec_vars -> VAR vars SEMICOLON .)


state 40

    (10) vars_simple -> type_simple vars_simple_dec .

    SEMICOLON       reduce using rule 10 (vars_simple -> type_simple vars_simple_dec .)


state 41

    (11) vars_simple_dec -> vars_simple_id . vars_simple_more
    (12) vars_simple_more -> . COMMA vars_simple_dec
    (13) vars_simple_more -> . empty
    (116) empty -> .

    COMMA           shift and go to state 53
    SEMICOLON       reduce using rule 116 (empty -> .)

    vars_simple_more               shift and go to state 52
    empty                          shift and go to state 54

state 42

    (14) vars_simple_id -> ID . vars_simple_arr
    (15) vars_simple_arr -> . LEFTKEY CTEI RIGHTKEY vars_simple_arr2
    (16) vars_simple_arr -> . empty
    (116) empty -> .

    LEFTKEY         shift and go to state 56
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    vars_simple_arr                shift and go to state 55
    empty                          shift and go to state 57

state 43

    (19) vars_complex -> type_complex vars_complex_dec .

    SEMICOLON       reduce using rule 19 (vars_complex -> type_complex vars_complex_dec .)


state 44

    (20) vars_complex_dec -> ID . vars_complex_more
    (21) vars_complex_more -> . COMMA vars_complex_dec
    (22) vars_complex_more -> . empty
    (116) empty -> .

    COMMA           shift and go to state 59
    SEMICOLON       reduce using rule 116 (empty -> .)

    vars_complex_more              shift and go to state 58
    empty                          shift and go to state 60

state 45

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN . LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    LEFTPAREN       shift and go to state 61


state 46

    (82) dec_class_idk -> class_body dec_class_more .

    MAIN            reduce using rule 82 (dec_class_idk -> class_body dec_class_more .)


state 47

    (83) dec_class_more -> dec_class_idk .

    MAIN            reduce using rule 83 (dec_class_more -> dec_class_idk .)


state 48

    (84) dec_class_more -> empty .

    MAIN            reduce using rule 84 (dec_class_more -> empty .)


state 49

    (85) class_body -> CLASS ID . dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON
    (86) dec_inherit -> . COLON INHERIT ID
    (87) dec_inherit -> . empty
    (116) empty -> .

    COLON           shift and go to state 63
    LEFTBRACKET     reduce using rule 116 (empty -> .)

    dec_inherit                    shift and go to state 62
    empty                          shift and go to state 64

state 50

    (33) fun -> FUN fun_type fun_id . LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    LEFTPAREN       shift and go to state 65


state 51

    (115) fun_id -> ID .

    LEFTPAREN       reduce using rule 115 (fun_id -> ID .)


state 52

    (11) vars_simple_dec -> vars_simple_id vars_simple_more .

    SEMICOLON       reduce using rule 11 (vars_simple_dec -> vars_simple_id vars_simple_more .)


state 53

    (12) vars_simple_more -> COMMA . vars_simple_dec
    (11) vars_simple_dec -> . vars_simple_id vars_simple_more
    (14) vars_simple_id -> . ID vars_simple_arr

    ID              shift and go to state 42

    vars_simple_dec                shift and go to state 66
    vars_simple_id                 shift and go to state 41

state 54

    (13) vars_simple_more -> empty .

    SEMICOLON       reduce using rule 13 (vars_simple_more -> empty .)


state 55

    (14) vars_simple_id -> ID vars_simple_arr .

    COMMA           reduce using rule 14 (vars_simple_id -> ID vars_simple_arr .)
    SEMICOLON       reduce using rule 14 (vars_simple_id -> ID vars_simple_arr .)


state 56

    (15) vars_simple_arr -> LEFTKEY . CTEI RIGHTKEY vars_simple_arr2

    CTEI            shift and go to state 67


state 57

    (16) vars_simple_arr -> empty .

    COMMA           reduce using rule 16 (vars_simple_arr -> empty .)
    SEMICOLON       reduce using rule 16 (vars_simple_arr -> empty .)


state 58

    (20) vars_complex_dec -> ID vars_complex_more .

    SEMICOLON       reduce using rule 20 (vars_complex_dec -> ID vars_complex_more .)


state 59

    (21) vars_complex_more -> COMMA . vars_complex_dec
    (20) vars_complex_dec -> . ID vars_complex_more

    ID              shift and go to state 44

    vars_complex_dec               shift and go to state 68

state 60

    (22) vars_complex_more -> empty .

    SEMICOLON       reduce using rule 22 (vars_complex_more -> empty .)


state 61

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN . RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    RIGHTPAREN      shift and go to state 69


state 62

    (85) class_body -> CLASS ID dec_inherit . LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    LEFTBRACKET     shift and go to state 70


state 63

    (86) dec_inherit -> COLON . INHERIT ID

    INHERIT         shift and go to state 71


state 64

    (87) dec_inherit -> empty .

    LEFTBRACKET     reduce using rule 87 (dec_inherit -> empty .)


state 65

    (33) fun -> FUN fun_type fun_id LEFTPAREN . param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET
    (34) param_pos -> . param
    (35) param_pos -> . empty
    (36) param -> . type_simple ID param_more
    (116) empty -> .
    (23) type_simple -> . INT
    (24) type_simple -> . FLOAT
    (25) type_simple -> . CHAR

    RIGHTPAREN      reduce using rule 116 (empty -> .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    param_pos                      shift and go to state 72
    param                          shift and go to state 73
    empty                          shift and go to state 74
    type_simple                    shift and go to state 75

state 66

    (12) vars_simple_more -> COMMA vars_simple_dec .

    SEMICOLON       reduce using rule 12 (vars_simple_more -> COMMA vars_simple_dec .)


state 67

    (15) vars_simple_arr -> LEFTKEY CTEI . RIGHTKEY vars_simple_arr2

    RIGHTKEY        shift and go to state 76


state 68

    (21) vars_complex_more -> COMMA vars_complex_dec .

    SEMICOLON       reduce using rule 21 (vars_complex_more -> COMMA vars_complex_dec .)


state 69

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN . LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 77


state 70

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET . PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    PRIVATE         shift and go to state 78


state 71

    (86) dec_inherit -> COLON INHERIT . ID

    ID              shift and go to state 79


state 72

    (33) fun -> FUN fun_type fun_id LEFTPAREN param_pos . RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    RIGHTPAREN      shift and go to state 80


state 73

    (34) param_pos -> param .

    RIGHTPAREN      reduce using rule 34 (param_pos -> param .)


state 74

    (35) param_pos -> empty .

    RIGHTPAREN      reduce using rule 35 (param_pos -> empty .)


state 75

    (36) param -> type_simple . ID param_more

    ID              shift and go to state 81


state 76

    (15) vars_simple_arr -> LEFTKEY CTEI RIGHTKEY . vars_simple_arr2
    (17) vars_simple_arr2 -> . LEFTKEY CTEI RIGHTKEY
    (18) vars_simple_arr2 -> . empty
    (116) empty -> .

    LEFTKEY         shift and go to state 82
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    vars_simple_arr2               shift and go to state 83
    empty                          shift and go to state 84

state 77

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET . dec_vars_mult dec_block RIGHTBRACKET
    (2) dec_vars_mult -> . dec_vars_idk
    (3) dec_vars_mult -> . empty
    (4) dec_vars_idk -> . dec_vars dec_vars_more
    (116) empty -> .
    (7) dec_vars -> . VAR vars SEMICOLON

    ID              reduce using rule 116 (empty -> .)
    INCO            reduce using rule 116 (empty -> .)
    OUTCO           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    VAR             shift and go to state 9

    dec_vars_mult                  shift and go to state 85
    dec_vars_idk                   shift and go to state 6
    empty                          shift and go to state 7
    dec_vars                       shift and go to state 8

state 78

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE . COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    COLON           shift and go to state 86


state 79

    (86) dec_inherit -> COLON INHERIT ID .

    LEFTBRACKET     reduce using rule 86 (dec_inherit -> COLON INHERIT ID .)


state 80

    (33) fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN . LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 87


state 81

    (36) param -> type_simple ID . param_more
    (37) param_more -> . COMMA param
    (38) param_more -> . empty
    (116) empty -> .

    COMMA           shift and go to state 89
    RIGHTPAREN      reduce using rule 116 (empty -> .)

    param_more                     shift and go to state 88
    empty                          shift and go to state 90

state 82

    (17) vars_simple_arr2 -> LEFTKEY . CTEI RIGHTKEY

    CTEI            shift and go to state 91


state 83

    (15) vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .

    COMMA           reduce using rule 15 (vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .)
    SEMICOLON       reduce using rule 15 (vars_simple_arr -> LEFTKEY CTEI RIGHTKEY vars_simple_arr2 .)


state 84

    (18) vars_simple_arr2 -> empty .

    COMMA           reduce using rule 18 (vars_simple_arr2 -> empty .)
    SEMICOLON       reduce using rule 18 (vars_simple_arr2 -> empty .)


state 85

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult . dec_block RIGHTBRACKET
    (42) dec_block -> . block
    (43) dec_block -> . empty
    (44) block -> . statement block_more
    (116) empty -> .
    (47) statement -> . dec_assign
    (48) statement -> . dec_call
    (49) statement -> . dec_read
    (50) statement -> . dec_write
    (51) statement -> . dec_condition
    (52) statement -> . dec_cycle
    (53) statement -> . dec_method
    (54) statement -> . fun_return
    (88) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (89) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (96) dec_read -> . INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON
    (97) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (101) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (104) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (105) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (41) fun_return -> . RETURN dec_exp_method SEMICOLON
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    ID              shift and go to state 92
    INCO            shift and go to state 106
    OUTCO           shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    RETURN          shift and go to state 110

    dec_block                      shift and go to state 93
    block                          shift and go to state 94
    empty                          shift and go to state 95
    statement                      shift and go to state 96
    dec_assign                     shift and go to state 97
    dec_call                       shift and go to state 98
    dec_read                       shift and go to state 99
    dec_write                      shift and go to state 100
    dec_condition                  shift and go to state 101
    dec_cycle                      shift and go to state 102
    dec_method                     shift and go to state 103
    fun_return                     shift and go to state 104
    var_id                         shift and go to state 105

state 86

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON . dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON
    (2) dec_vars_mult -> . dec_vars_idk
    (3) dec_vars_mult -> . empty
    (4) dec_vars_idk -> . dec_vars dec_vars_more
    (116) empty -> .
    (7) dec_vars -> . VAR vars SEMICOLON

    FUN             reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 9

    dec_vars_mult                  shift and go to state 111
    dec_vars_idk                   shift and go to state 6
    empty                          shift and go to state 7
    dec_vars                       shift and go to state 8

state 87

    (33) fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET . dec_vars_mult dec_block RIGHTBRACKET
    (2) dec_vars_mult -> . dec_vars_idk
    (3) dec_vars_mult -> . empty
    (4) dec_vars_idk -> . dec_vars dec_vars_more
    (116) empty -> .
    (7) dec_vars -> . VAR vars SEMICOLON

    ID              reduce using rule 116 (empty -> .)
    INCO            reduce using rule 116 (empty -> .)
    OUTCO           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    VAR             shift and go to state 9

    dec_vars_mult                  shift and go to state 112
    dec_vars_idk                   shift and go to state 6
    empty                          shift and go to state 7
    dec_vars                       shift and go to state 8

state 88

    (36) param -> type_simple ID param_more .

    RIGHTPAREN      reduce using rule 36 (param -> type_simple ID param_more .)


state 89

    (37) param_more -> COMMA . param
    (36) param -> . type_simple ID param_more
    (23) type_simple -> . INT
    (24) type_simple -> . FLOAT
    (25) type_simple -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    param                          shift and go to state 113
    type_simple                    shift and go to state 75

state 90

    (38) param_more -> empty .

    RIGHTPAREN      reduce using rule 38 (param_more -> empty .)


state 91

    (17) vars_simple_arr2 -> LEFTKEY CTEI . RIGHTKEY

    RIGHTKEY        shift and go to state 114


state 92

    (89) dec_call -> ID . LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (105) dec_method -> ID . DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (112) var_id -> ID .
    (113) var_id -> ID . LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> ID . LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    LEFTPAREN       shift and go to state 115
    DOT             shift and go to state 116
    COMP_EQUAL      reduce using rule 112 (var_id -> ID .)
    LEFTKEY         shift and go to state 117


state 93

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 118


state 94

    (42) dec_block -> block .

    RIGHTBRACKET    reduce using rule 42 (dec_block -> block .)


state 95

    (43) dec_block -> empty .

    RIGHTBRACKET    reduce using rule 43 (dec_block -> empty .)


state 96

    (44) block -> statement . block_more
    (45) block_more -> . block
    (46) block_more -> . empty
    (44) block -> . statement block_more
    (116) empty -> .
    (47) statement -> . dec_assign
    (48) statement -> . dec_call
    (49) statement -> . dec_read
    (50) statement -> . dec_write
    (51) statement -> . dec_condition
    (52) statement -> . dec_cycle
    (53) statement -> . dec_method
    (54) statement -> . fun_return
    (88) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (89) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (96) dec_read -> . INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON
    (97) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (101) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (104) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (105) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (41) fun_return -> . RETURN dec_exp_method SEMICOLON
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    ID              shift and go to state 92
    INCO            shift and go to state 106
    OUTCO           shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    RETURN          shift and go to state 110

    statement                      shift and go to state 96
    block_more                     shift and go to state 119
    block                          shift and go to state 120
    empty                          shift and go to state 121
    dec_assign                     shift and go to state 97
    dec_call                       shift and go to state 98
    dec_read                       shift and go to state 99
    dec_write                      shift and go to state 100
    dec_condition                  shift and go to state 101
    dec_cycle                      shift and go to state 102
    dec_method                     shift and go to state 103
    fun_return                     shift and go to state 104
    var_id                         shift and go to state 105

state 97

    (47) statement -> dec_assign .

    ID              reduce using rule 47 (statement -> dec_assign .)
    INCO            reduce using rule 47 (statement -> dec_assign .)
    OUTCO           reduce using rule 47 (statement -> dec_assign .)
    IF              reduce using rule 47 (statement -> dec_assign .)
    WHILE           reduce using rule 47 (statement -> dec_assign .)
    RETURN          reduce using rule 47 (statement -> dec_assign .)
    RIGHTBRACKET    reduce using rule 47 (statement -> dec_assign .)


state 98

    (48) statement -> dec_call .

    ID              reduce using rule 48 (statement -> dec_call .)
    INCO            reduce using rule 48 (statement -> dec_call .)
    OUTCO           reduce using rule 48 (statement -> dec_call .)
    IF              reduce using rule 48 (statement -> dec_call .)
    WHILE           reduce using rule 48 (statement -> dec_call .)
    RETURN          reduce using rule 48 (statement -> dec_call .)
    RIGHTBRACKET    reduce using rule 48 (statement -> dec_call .)


state 99

    (49) statement -> dec_read .

    ID              reduce using rule 49 (statement -> dec_read .)
    INCO            reduce using rule 49 (statement -> dec_read .)
    OUTCO           reduce using rule 49 (statement -> dec_read .)
    IF              reduce using rule 49 (statement -> dec_read .)
    WHILE           reduce using rule 49 (statement -> dec_read .)
    RETURN          reduce using rule 49 (statement -> dec_read .)
    RIGHTBRACKET    reduce using rule 49 (statement -> dec_read .)


state 100

    (50) statement -> dec_write .

    ID              reduce using rule 50 (statement -> dec_write .)
    INCO            reduce using rule 50 (statement -> dec_write .)
    OUTCO           reduce using rule 50 (statement -> dec_write .)
    IF              reduce using rule 50 (statement -> dec_write .)
    WHILE           reduce using rule 50 (statement -> dec_write .)
    RETURN          reduce using rule 50 (statement -> dec_write .)
    RIGHTBRACKET    reduce using rule 50 (statement -> dec_write .)


state 101

    (51) statement -> dec_condition .

    ID              reduce using rule 51 (statement -> dec_condition .)
    INCO            reduce using rule 51 (statement -> dec_condition .)
    OUTCO           reduce using rule 51 (statement -> dec_condition .)
    IF              reduce using rule 51 (statement -> dec_condition .)
    WHILE           reduce using rule 51 (statement -> dec_condition .)
    RETURN          reduce using rule 51 (statement -> dec_condition .)
    RIGHTBRACKET    reduce using rule 51 (statement -> dec_condition .)


state 102

    (52) statement -> dec_cycle .

    ID              reduce using rule 52 (statement -> dec_cycle .)
    INCO            reduce using rule 52 (statement -> dec_cycle .)
    OUTCO           reduce using rule 52 (statement -> dec_cycle .)
    IF              reduce using rule 52 (statement -> dec_cycle .)
    WHILE           reduce using rule 52 (statement -> dec_cycle .)
    RETURN          reduce using rule 52 (statement -> dec_cycle .)
    RIGHTBRACKET    reduce using rule 52 (statement -> dec_cycle .)


state 103

    (53) statement -> dec_method .

    ID              reduce using rule 53 (statement -> dec_method .)
    INCO            reduce using rule 53 (statement -> dec_method .)
    OUTCO           reduce using rule 53 (statement -> dec_method .)
    IF              reduce using rule 53 (statement -> dec_method .)
    WHILE           reduce using rule 53 (statement -> dec_method .)
    RETURN          reduce using rule 53 (statement -> dec_method .)
    RIGHTBRACKET    reduce using rule 53 (statement -> dec_method .)


state 104

    (54) statement -> fun_return .

    ID              reduce using rule 54 (statement -> fun_return .)
    INCO            reduce using rule 54 (statement -> fun_return .)
    OUTCO           reduce using rule 54 (statement -> fun_return .)
    IF              reduce using rule 54 (statement -> fun_return .)
    WHILE           reduce using rule 54 (statement -> fun_return .)
    RETURN          reduce using rule 54 (statement -> fun_return .)
    RIGHTBRACKET    reduce using rule 54 (statement -> fun_return .)


state 105

    (88) dec_assign -> var_id . COMP_EQUAL dec_exp SEMICOLON

    COMP_EQUAL      shift and go to state 122


state 106

    (96) dec_read -> INCO . LEFTPAREN var_id RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 123


state 107

    (97) dec_write -> OUTCO . LEFTPAREN write RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 124


state 108

    (101) dec_condition -> IF . LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else

    LEFTPAREN       shift and go to state 125


state 109

    (104) dec_cycle -> WHILE . LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET

    LEFTPAREN       shift and go to state 126


state 110

    (41) fun_return -> RETURN . dec_exp_method SEMICOLON
    (60) dec_exp_method -> . dec_exp_s
    (61) dec_exp_method -> . empty
    (56) dec_exp_s -> . dec_term pm_op
    (116) empty -> .
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    SEMICOLON       reduce using rule 116 (empty -> .)
    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp_method                 shift and go to state 127
    dec_exp_s                      shift and go to state 128
    empty                          shift and go to state 129
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 111

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult . dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON
    (28) dec_fun -> . dec_fun_idk
    (29) dec_fun -> . empty
    (30) dec_fun_idk -> . fun dec_fun_more
    (116) empty -> .
    (33) fun -> . FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    PUBLIC          reduce using rule 116 (empty -> .)
    FUN             shift and go to state 14

    dec_fun                        shift and go to state 144
    dec_fun_idk                    shift and go to state 11
    empty                          shift and go to state 12
    fun                            shift and go to state 13

state 112

    (33) fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult . dec_block RIGHTBRACKET
    (42) dec_block -> . block
    (43) dec_block -> . empty
    (44) block -> . statement block_more
    (116) empty -> .
    (47) statement -> . dec_assign
    (48) statement -> . dec_call
    (49) statement -> . dec_read
    (50) statement -> . dec_write
    (51) statement -> . dec_condition
    (52) statement -> . dec_cycle
    (53) statement -> . dec_method
    (54) statement -> . fun_return
    (88) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (89) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (96) dec_read -> . INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON
    (97) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (101) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (104) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (105) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (41) fun_return -> . RETURN dec_exp_method SEMICOLON
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    ID              shift and go to state 92
    INCO            shift and go to state 106
    OUTCO           shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    RETURN          shift and go to state 110

    dec_block                      shift and go to state 145
    block                          shift and go to state 94
    empty                          shift and go to state 95
    statement                      shift and go to state 96
    dec_assign                     shift and go to state 97
    dec_call                       shift and go to state 98
    dec_read                       shift and go to state 99
    dec_write                      shift and go to state 100
    dec_condition                  shift and go to state 101
    dec_cycle                      shift and go to state 102
    dec_method                     shift and go to state 103
    fun_return                     shift and go to state 104
    var_id                         shift and go to state 105

state 113

    (37) param_more -> COMMA param .

    RIGHTPAREN      reduce using rule 37 (param_more -> COMMA param .)


state 114

    (17) vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .

    COMMA           reduce using rule 17 (vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .)
    SEMICOLON       reduce using rule 17 (vars_simple_arr2 -> LEFTKEY CTEI RIGHTKEY .)


state 115

    (89) dec_call -> ID LEFTPAREN . call_pos RIGHTPAREN SEMICOLON
    (91) call_pos -> . call
    (92) call_pos -> . empty
    (93) call -> . dec_exp call_more
    (116) empty -> .
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    RIGHTPAREN      reduce using rule 116 (empty -> .)
    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    call_pos                       shift and go to state 146
    call                           shift and go to state 147
    empty                          shift and go to state 148
    dec_exp                        shift and go to state 149
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 116

    (105) dec_method -> ID DOT . ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    ID              shift and go to state 151


state 117

    (113) var_id -> ID LEFTKEY . dec_exp RIGHTKEY
    (114) var_id -> ID LEFTKEY . dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp                        shift and go to state 152
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 118

    (1) program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON dec_vars_mult dec_fun dec_class MAIN LEFTPAREN RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .)


state 119

    (44) block -> statement block_more .

    RIGHTBRACKET    reduce using rule 44 (block -> statement block_more .)


state 120

    (45) block_more -> block .

    RIGHTBRACKET    reduce using rule 45 (block_more -> block .)


state 121

    (46) block_more -> empty .

    RIGHTBRACKET    reduce using rule 46 (block_more -> empty .)


state 122

    (88) dec_assign -> var_id COMP_EQUAL . dec_exp SEMICOLON
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    var_id                         shift and go to state 134
    dec_exp                        shift and go to state 153
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 123

    (96) dec_read -> INCO LEFTPAREN . var_id RIGHTPAREN SEMICOLON
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    ID              shift and go to state 155

    var_id                         shift and go to state 154

state 124

    (97) dec_write -> OUTCO LEFTPAREN . write RIGHTPAREN SEMICOLON
    (98) write -> . dec_exp write_more
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    write                          shift and go to state 156
    dec_exp                        shift and go to state 157
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 125

    (101) dec_condition -> IF LEFTPAREN . dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp                        shift and go to state 158
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 126

    (104) dec_cycle -> WHILE LEFTPAREN . dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp                        shift and go to state 159
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 127

    (41) fun_return -> RETURN dec_exp_method . SEMICOLON

    SEMICOLON       shift and go to state 160


state 128

    (60) dec_exp_method -> dec_exp_s .
    (74) s_exp -> dec_exp_s . comp_op
    (75) comp_op -> . COMP_LESS s_exp
    (76) comp_op -> . COMP_GREATER s_exp
    (77) comp_op -> . COMP_EQUAL s_exp
    (78) comp_op -> . COMP_NOTEQUAL s_exp
    (79) comp_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GREATER resolved as shift
  ! shift/reduce conflict for COMP_EQUAL resolved as shift
  ! shift/reduce conflict for COMP_NOTEQUAL resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (dec_exp_method -> dec_exp_s .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 60 (dec_exp_method -> dec_exp_s .)
    SEMICOLON       reduce using rule 60 (dec_exp_method -> dec_exp_s .)
    RIGHTPAREN      reduce using rule 60 (dec_exp_method -> dec_exp_s .)
    COMP_LESS       shift and go to state 162
    COMP_GREATER    shift and go to state 163
    COMP_EQUAL      shift and go to state 164
    COMP_NOTEQUAL   shift and go to state 165
    COMP_AND        reduce using rule 116 (empty -> .)
    COMP_OR         reduce using rule 116 (empty -> .)
    TIMES           reduce using rule 116 (empty -> .)
    DIVIDE          reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)

  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]

    comp_op                        shift and go to state 161
    empty                          shift and go to state 166

state 129

    (61) dec_exp_method -> empty .

    SEMICOLON       reduce using rule 61 (dec_exp_method -> empty .)
    RIGHTPAREN      reduce using rule 61 (dec_exp_method -> empty .)


state 130

    (56) dec_exp_s -> dec_term . pm_op
    (57) pm_op -> . PLUS dec_exp_s
    (58) pm_op -> . MINUS dec_exp_s
    (59) pm_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    COMP_LESS       reduce using rule 116 (empty -> .)
    COMP_GREATER    reduce using rule 116 (empty -> .)
    COMP_EQUAL      reduce using rule 116 (empty -> .)
    COMP_NOTEQUAL   reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    COMP_AND        reduce using rule 116 (empty -> .)
    COMP_OR         reduce using rule 116 (empty -> .)
    TIMES           reduce using rule 116 (empty -> .)
    DIVIDE          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    RIGHTPAREN      reduce using rule 116 (empty -> .)
    RIGHTKEY        reduce using rule 116 (empty -> .)

  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]

    pm_op                          shift and go to state 167
    empty                          shift and go to state 170

state 131

    (62) dec_term -> dec_fact . md_op
    (63) md_op -> . TIMES dec_term
    (64) md_op -> . DIVIDE dec_term
    (65) md_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    TIMES           shift and go to state 172
    DIVIDE          shift and go to state 173
    COMP_LESS       reduce using rule 116 (empty -> .)
    COMP_GREATER    reduce using rule 116 (empty -> .)
    COMP_EQUAL      reduce using rule 116 (empty -> .)
    COMP_NOTEQUAL   reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    COMP_AND        reduce using rule 116 (empty -> .)
    COMP_OR         reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    RIGHTPAREN      reduce using rule 116 (empty -> .)
    RIGHTKEY        reduce using rule 116 (empty -> .)

  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]

    md_op                          shift and go to state 171
    empty                          shift and go to state 174

state 132

    (66) dec_fact -> var_cte .

    COMP_LESS       reduce using rule 66 (dec_fact -> var_cte .)
    COMP_GREATER    reduce using rule 66 (dec_fact -> var_cte .)
    COMP_EQUAL      reduce using rule 66 (dec_fact -> var_cte .)
    COMP_NOTEQUAL   reduce using rule 66 (dec_fact -> var_cte .)
    SEMICOLON       reduce using rule 66 (dec_fact -> var_cte .)
    COMP_AND        reduce using rule 66 (dec_fact -> var_cte .)
    COMP_OR         reduce using rule 66 (dec_fact -> var_cte .)
    TIMES           reduce using rule 66 (dec_fact -> var_cte .)
    DIVIDE          reduce using rule 66 (dec_fact -> var_cte .)
    PLUS            reduce using rule 66 (dec_fact -> var_cte .)
    MINUS           reduce using rule 66 (dec_fact -> var_cte .)
    COMMA           reduce using rule 66 (dec_fact -> var_cte .)
    RIGHTPAREN      reduce using rule 66 (dec_fact -> var_cte .)
    RIGHTKEY        reduce using rule 66 (dec_fact -> var_cte .)


state 133

    (67) dec_fact -> hyper_call .

    COMP_LESS       reduce using rule 67 (dec_fact -> hyper_call .)
    COMP_GREATER    reduce using rule 67 (dec_fact -> hyper_call .)
    COMP_EQUAL      reduce using rule 67 (dec_fact -> hyper_call .)
    COMP_NOTEQUAL   reduce using rule 67 (dec_fact -> hyper_call .)
    SEMICOLON       reduce using rule 67 (dec_fact -> hyper_call .)
    COMP_AND        reduce using rule 67 (dec_fact -> hyper_call .)
    COMP_OR         reduce using rule 67 (dec_fact -> hyper_call .)
    TIMES           reduce using rule 67 (dec_fact -> hyper_call .)
    DIVIDE          reduce using rule 67 (dec_fact -> hyper_call .)
    PLUS            reduce using rule 67 (dec_fact -> hyper_call .)
    MINUS           reduce using rule 67 (dec_fact -> hyper_call .)
    COMMA           reduce using rule 67 (dec_fact -> hyper_call .)
    RIGHTPAREN      reduce using rule 67 (dec_fact -> hyper_call .)
    RIGHTKEY        reduce using rule 67 (dec_fact -> hyper_call .)


state 134

    (106) var_cte -> var_id .

    COMP_LESS       reduce using rule 106 (var_cte -> var_id .)
    COMP_GREATER    reduce using rule 106 (var_cte -> var_id .)
    COMP_EQUAL      reduce using rule 106 (var_cte -> var_id .)
    COMP_NOTEQUAL   reduce using rule 106 (var_cte -> var_id .)
    SEMICOLON       reduce using rule 106 (var_cte -> var_id .)
    COMP_AND        reduce using rule 106 (var_cte -> var_id .)
    COMP_OR         reduce using rule 106 (var_cte -> var_id .)
    TIMES           reduce using rule 106 (var_cte -> var_id .)
    DIVIDE          reduce using rule 106 (var_cte -> var_id .)
    PLUS            reduce using rule 106 (var_cte -> var_id .)
    MINUS           reduce using rule 106 (var_cte -> var_id .)
    COMMA           reduce using rule 106 (var_cte -> var_id .)
    RIGHTPAREN      reduce using rule 106 (var_cte -> var_id .)
    RIGHTKEY        reduce using rule 106 (var_cte -> var_id .)


state 135

    (107) var_cte -> dec_call_exp .

    COMP_LESS       reduce using rule 107 (var_cte -> dec_call_exp .)
    COMP_GREATER    reduce using rule 107 (var_cte -> dec_call_exp .)
    COMP_EQUAL      reduce using rule 107 (var_cte -> dec_call_exp .)
    COMP_NOTEQUAL   reduce using rule 107 (var_cte -> dec_call_exp .)
    SEMICOLON       reduce using rule 107 (var_cte -> dec_call_exp .)
    COMP_AND        reduce using rule 107 (var_cte -> dec_call_exp .)
    COMP_OR         reduce using rule 107 (var_cte -> dec_call_exp .)
    TIMES           reduce using rule 107 (var_cte -> dec_call_exp .)
    DIVIDE          reduce using rule 107 (var_cte -> dec_call_exp .)
    PLUS            reduce using rule 107 (var_cte -> dec_call_exp .)
    MINUS           reduce using rule 107 (var_cte -> dec_call_exp .)
    COMMA           reduce using rule 107 (var_cte -> dec_call_exp .)
    RIGHTPAREN      reduce using rule 107 (var_cte -> dec_call_exp .)
    RIGHTKEY        reduce using rule 107 (var_cte -> dec_call_exp .)


state 136

    (108) var_cte -> var_const .

    COMP_LESS       reduce using rule 108 (var_cte -> var_const .)
    COMP_GREATER    reduce using rule 108 (var_cte -> var_const .)
    COMP_EQUAL      reduce using rule 108 (var_cte -> var_const .)
    COMP_NOTEQUAL   reduce using rule 108 (var_cte -> var_const .)
    SEMICOLON       reduce using rule 108 (var_cte -> var_const .)
    COMP_AND        reduce using rule 108 (var_cte -> var_const .)
    COMP_OR         reduce using rule 108 (var_cte -> var_const .)
    TIMES           reduce using rule 108 (var_cte -> var_const .)
    DIVIDE          reduce using rule 108 (var_cte -> var_const .)
    PLUS            reduce using rule 108 (var_cte -> var_const .)
    MINUS           reduce using rule 108 (var_cte -> var_const .)
    COMMA           reduce using rule 108 (var_cte -> var_const .)
    RIGHTPAREN      reduce using rule 108 (var_cte -> var_const .)
    RIGHTKEY        reduce using rule 108 (var_cte -> var_const .)


state 137

    (68) hyper_call -> h_exp .

    COMP_LESS       reduce using rule 68 (hyper_call -> h_exp .)
    COMP_GREATER    reduce using rule 68 (hyper_call -> h_exp .)
    COMP_EQUAL      reduce using rule 68 (hyper_call -> h_exp .)
    COMP_NOTEQUAL   reduce using rule 68 (hyper_call -> h_exp .)
    SEMICOLON       reduce using rule 68 (hyper_call -> h_exp .)
    COMP_AND        reduce using rule 68 (hyper_call -> h_exp .)
    COMP_OR         reduce using rule 68 (hyper_call -> h_exp .)
    TIMES           reduce using rule 68 (hyper_call -> h_exp .)
    DIVIDE          reduce using rule 68 (hyper_call -> h_exp .)
    PLUS            reduce using rule 68 (hyper_call -> h_exp .)
    MINUS           reduce using rule 68 (hyper_call -> h_exp .)
    COMMA           reduce using rule 68 (hyper_call -> h_exp .)
    RIGHTPAREN      reduce using rule 68 (hyper_call -> h_exp .)
    RIGHTKEY        reduce using rule 68 (hyper_call -> h_exp .)


state 138

    (69) hyper_call -> LEFTPAREN . h_exp RIGHTPAREN
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    h_exp                          shift and go to state 175
    s_exp                          shift and go to state 143
    dec_exp_s                      shift and go to state 176
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136

state 139

    (112) var_id -> ID .
    (113) var_id -> ID . LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> ID . LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> ID . LEFTPAREN call_pos RIGHTPAREN

    COMP_LESS       reduce using rule 112 (var_id -> ID .)
    COMP_GREATER    reduce using rule 112 (var_id -> ID .)
    COMP_EQUAL      reduce using rule 112 (var_id -> ID .)
    COMP_NOTEQUAL   reduce using rule 112 (var_id -> ID .)
    SEMICOLON       reduce using rule 112 (var_id -> ID .)
    COMP_AND        reduce using rule 112 (var_id -> ID .)
    COMP_OR         reduce using rule 112 (var_id -> ID .)
    TIMES           reduce using rule 112 (var_id -> ID .)
    DIVIDE          reduce using rule 112 (var_id -> ID .)
    PLUS            reduce using rule 112 (var_id -> ID .)
    MINUS           reduce using rule 112 (var_id -> ID .)
    COMMA           reduce using rule 112 (var_id -> ID .)
    RIGHTPAREN      reduce using rule 112 (var_id -> ID .)
    RIGHTKEY        reduce using rule 112 (var_id -> ID .)
    LEFTKEY         shift and go to state 117
    LEFTPAREN       shift and go to state 177


state 140

    (109) var_const -> CTEI .

    COMP_LESS       reduce using rule 109 (var_const -> CTEI .)
    COMP_GREATER    reduce using rule 109 (var_const -> CTEI .)
    COMP_EQUAL      reduce using rule 109 (var_const -> CTEI .)
    COMP_NOTEQUAL   reduce using rule 109 (var_const -> CTEI .)
    SEMICOLON       reduce using rule 109 (var_const -> CTEI .)
    COMP_AND        reduce using rule 109 (var_const -> CTEI .)
    COMP_OR         reduce using rule 109 (var_const -> CTEI .)
    TIMES           reduce using rule 109 (var_const -> CTEI .)
    DIVIDE          reduce using rule 109 (var_const -> CTEI .)
    PLUS            reduce using rule 109 (var_const -> CTEI .)
    MINUS           reduce using rule 109 (var_const -> CTEI .)
    COMMA           reduce using rule 109 (var_const -> CTEI .)
    RIGHTPAREN      reduce using rule 109 (var_const -> CTEI .)
    RIGHTKEY        reduce using rule 109 (var_const -> CTEI .)


state 141

    (110) var_const -> CTEF .

    COMP_LESS       reduce using rule 110 (var_const -> CTEF .)
    COMP_GREATER    reduce using rule 110 (var_const -> CTEF .)
    COMP_EQUAL      reduce using rule 110 (var_const -> CTEF .)
    COMP_NOTEQUAL   reduce using rule 110 (var_const -> CTEF .)
    SEMICOLON       reduce using rule 110 (var_const -> CTEF .)
    COMP_AND        reduce using rule 110 (var_const -> CTEF .)
    COMP_OR         reduce using rule 110 (var_const -> CTEF .)
    TIMES           reduce using rule 110 (var_const -> CTEF .)
    DIVIDE          reduce using rule 110 (var_const -> CTEF .)
    PLUS            reduce using rule 110 (var_const -> CTEF .)
    MINUS           reduce using rule 110 (var_const -> CTEF .)
    COMMA           reduce using rule 110 (var_const -> CTEF .)
    RIGHTPAREN      reduce using rule 110 (var_const -> CTEF .)
    RIGHTKEY        reduce using rule 110 (var_const -> CTEF .)


state 142

    (111) var_const -> CHAR_DEC .

    COMP_LESS       reduce using rule 111 (var_const -> CHAR_DEC .)
    COMP_GREATER    reduce using rule 111 (var_const -> CHAR_DEC .)
    COMP_EQUAL      reduce using rule 111 (var_const -> CHAR_DEC .)
    COMP_NOTEQUAL   reduce using rule 111 (var_const -> CHAR_DEC .)
    SEMICOLON       reduce using rule 111 (var_const -> CHAR_DEC .)
    COMP_AND        reduce using rule 111 (var_const -> CHAR_DEC .)
    COMP_OR         reduce using rule 111 (var_const -> CHAR_DEC .)
    TIMES           reduce using rule 111 (var_const -> CHAR_DEC .)
    DIVIDE          reduce using rule 111 (var_const -> CHAR_DEC .)
    PLUS            reduce using rule 111 (var_const -> CHAR_DEC .)
    MINUS           reduce using rule 111 (var_const -> CHAR_DEC .)
    COMMA           reduce using rule 111 (var_const -> CHAR_DEC .)
    RIGHTPAREN      reduce using rule 111 (var_const -> CHAR_DEC .)
    RIGHTKEY        reduce using rule 111 (var_const -> CHAR_DEC .)


state 143

    (70) h_exp -> s_exp . ao_op
    (71) ao_op -> . COMP_AND h_exp
    (72) ao_op -> . COMP_OR h_exp
    (73) ao_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
    COMP_AND        shift and go to state 179
    COMP_OR         shift and go to state 180
    COMP_LESS       reduce using rule 116 (empty -> .)
    COMP_GREATER    reduce using rule 116 (empty -> .)
    COMP_EQUAL      reduce using rule 116 (empty -> .)
    COMP_NOTEQUAL   reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    TIMES           reduce using rule 116 (empty -> .)
    DIVIDE          reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    RIGHTPAREN      reduce using rule 116 (empty -> .)
    RIGHTKEY        reduce using rule 116 (empty -> .)

  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]

    ao_op                          shift and go to state 178
    empty                          shift and go to state 181

state 144

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun . PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    PUBLIC          shift and go to state 182


state 145

    (33) fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 183


state 146

    (89) dec_call -> ID LEFTPAREN call_pos . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 184


state 147

    (91) call_pos -> call .

    RIGHTPAREN      reduce using rule 91 (call_pos -> call .)


state 148

    (92) call_pos -> empty .

    RIGHTPAREN      reduce using rule 92 (call_pos -> empty .)


state 149

    (93) call -> dec_exp . call_more
    (94) call_more -> . COMMA call
    (95) call_more -> . empty
    (116) empty -> .

    COMMA           shift and go to state 186
    RIGHTPAREN      reduce using rule 116 (empty -> .)

    call_more                      shift and go to state 185
    empty                          shift and go to state 187

state 150

    (55) dec_exp -> dec_exp_s .
    (74) s_exp -> dec_exp_s . comp_op
    (75) comp_op -> . COMP_LESS s_exp
    (76) comp_op -> . COMP_GREATER s_exp
    (77) comp_op -> . COMP_EQUAL s_exp
    (78) comp_op -> . COMP_NOTEQUAL s_exp
    (79) comp_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GREATER resolved as shift
  ! shift/reduce conflict for COMP_EQUAL resolved as shift
  ! shift/reduce conflict for COMP_NOTEQUAL resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 55 (dec_exp -> dec_exp_s .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 55 (dec_exp -> dec_exp_s .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 55 (dec_exp -> dec_exp_s .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (dec_exp -> dec_exp_s .)
    COMMA           reduce using rule 55 (dec_exp -> dec_exp_s .)
    RIGHTPAREN      reduce using rule 55 (dec_exp -> dec_exp_s .)
    RIGHTKEY        reduce using rule 55 (dec_exp -> dec_exp_s .)
    SEMICOLON       reduce using rule 55 (dec_exp -> dec_exp_s .)
    COMP_LESS       shift and go to state 162
    COMP_GREATER    shift and go to state 163
    COMP_EQUAL      shift and go to state 164
    COMP_NOTEQUAL   shift and go to state 165
    COMP_AND        reduce using rule 116 (empty -> .)
    COMP_OR         reduce using rule 116 (empty -> .)
    TIMES           reduce using rule 116 (empty -> .)
    DIVIDE          reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)

  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]

    comp_op                        shift and go to state 161
    empty                          shift and go to state 166

state 151

    (105) dec_method -> ID DOT ID . LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 188


state 152

    (113) var_id -> ID LEFTKEY dec_exp . RIGHTKEY
    (114) var_id -> ID LEFTKEY dec_exp . RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTKEY        shift and go to state 189


state 153

    (88) dec_assign -> var_id COMP_EQUAL dec_exp . SEMICOLON

    SEMICOLON       shift and go to state 190


state 154

    (96) dec_read -> INCO LEFTPAREN var_id . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 191


state 155

    (112) var_id -> ID .
    (113) var_id -> ID . LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> ID . LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTPAREN      reduce using rule 112 (var_id -> ID .)
    LEFTKEY         shift and go to state 117


state 156

    (97) dec_write -> OUTCO LEFTPAREN write . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 192


state 157

    (98) write -> dec_exp . write_more
    (99) write_more -> . COMMA write
    (100) write_more -> . empty
    (116) empty -> .

    COMMA           shift and go to state 194
    RIGHTPAREN      reduce using rule 116 (empty -> .)

    write_more                     shift and go to state 193
    empty                          shift and go to state 195

state 158

    (101) dec_condition -> IF LEFTPAREN dec_exp . RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else

    RIGHTPAREN      shift and go to state 196


state 159

    (104) dec_cycle -> WHILE LEFTPAREN dec_exp . RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET

    RIGHTPAREN      shift and go to state 197


state 160

    (41) fun_return -> RETURN dec_exp_method SEMICOLON .

    ID              reduce using rule 41 (fun_return -> RETURN dec_exp_method SEMICOLON .)
    INCO            reduce using rule 41 (fun_return -> RETURN dec_exp_method SEMICOLON .)
    OUTCO           reduce using rule 41 (fun_return -> RETURN dec_exp_method SEMICOLON .)
    IF              reduce using rule 41 (fun_return -> RETURN dec_exp_method SEMICOLON .)
    WHILE           reduce using rule 41 (fun_return -> RETURN dec_exp_method SEMICOLON .)
    RETURN          reduce using rule 41 (fun_return -> RETURN dec_exp_method SEMICOLON .)
    RIGHTBRACKET    reduce using rule 41 (fun_return -> RETURN dec_exp_method SEMICOLON .)


state 161

    (74) s_exp -> dec_exp_s comp_op .

    COMP_LESS       reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    COMP_GREATER    reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    COMP_EQUAL      reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    COMP_NOTEQUAL   reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    SEMICOLON       reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    COMP_AND        reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    COMP_OR         reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    TIMES           reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    DIVIDE          reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    PLUS            reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    MINUS           reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    COMMA           reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    RIGHTPAREN      reduce using rule 74 (s_exp -> dec_exp_s comp_op .)
    RIGHTKEY        reduce using rule 74 (s_exp -> dec_exp_s comp_op .)


state 162

    (75) comp_op -> COMP_LESS . s_exp
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    s_exp                          shift and go to state 198
    dec_exp_s                      shift and go to state 176
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137

state 163

    (76) comp_op -> COMP_GREATER . s_exp
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    s_exp                          shift and go to state 199
    dec_exp_s                      shift and go to state 176
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137

state 164

    (77) comp_op -> COMP_EQUAL . s_exp
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    s_exp                          shift and go to state 200
    dec_exp_s                      shift and go to state 176
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137

state 165

    (78) comp_op -> COMP_NOTEQUAL . s_exp
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    s_exp                          shift and go to state 201
    dec_exp_s                      shift and go to state 176
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137

state 166

    (79) comp_op -> empty .

    COMP_LESS       reduce using rule 79 (comp_op -> empty .)
    COMP_GREATER    reduce using rule 79 (comp_op -> empty .)
    COMP_EQUAL      reduce using rule 79 (comp_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 79 (comp_op -> empty .)
    SEMICOLON       reduce using rule 79 (comp_op -> empty .)
    COMP_AND        reduce using rule 79 (comp_op -> empty .)
    COMP_OR         reduce using rule 79 (comp_op -> empty .)
    TIMES           reduce using rule 79 (comp_op -> empty .)
    DIVIDE          reduce using rule 79 (comp_op -> empty .)
    PLUS            reduce using rule 79 (comp_op -> empty .)
    MINUS           reduce using rule 79 (comp_op -> empty .)
    RIGHTPAREN      reduce using rule 79 (comp_op -> empty .)
    COMMA           reduce using rule 79 (comp_op -> empty .)
    RIGHTKEY        reduce using rule 79 (comp_op -> empty .)


state 167

    (56) dec_exp_s -> dec_term pm_op .

    COMP_LESS       reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    COMP_GREATER    reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    COMP_EQUAL      reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    COMP_NOTEQUAL   reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    SEMICOLON       reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    COMP_AND        reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    COMP_OR         reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    TIMES           reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    DIVIDE          reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    PLUS            reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    MINUS           reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    COMMA           reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    RIGHTPAREN      reduce using rule 56 (dec_exp_s -> dec_term pm_op .)
    RIGHTKEY        reduce using rule 56 (dec_exp_s -> dec_term pm_op .)


state 168

    (57) pm_op -> PLUS . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp_s                      shift and go to state 202
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 169

    (58) pm_op -> MINUS . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp_s                      shift and go to state 203
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 170

    (59) pm_op -> empty .

    COMP_LESS       reduce using rule 59 (pm_op -> empty .)
    COMP_GREATER    reduce using rule 59 (pm_op -> empty .)
    COMP_EQUAL      reduce using rule 59 (pm_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 59 (pm_op -> empty .)
    SEMICOLON       reduce using rule 59 (pm_op -> empty .)
    COMP_AND        reduce using rule 59 (pm_op -> empty .)
    COMP_OR         reduce using rule 59 (pm_op -> empty .)
    TIMES           reduce using rule 59 (pm_op -> empty .)
    DIVIDE          reduce using rule 59 (pm_op -> empty .)
    PLUS            reduce using rule 59 (pm_op -> empty .)
    MINUS           reduce using rule 59 (pm_op -> empty .)
    COMMA           reduce using rule 59 (pm_op -> empty .)
    RIGHTPAREN      reduce using rule 59 (pm_op -> empty .)
    RIGHTKEY        reduce using rule 59 (pm_op -> empty .)


state 171

    (62) dec_term -> dec_fact md_op .

    COMP_LESS       reduce using rule 62 (dec_term -> dec_fact md_op .)
    COMP_GREATER    reduce using rule 62 (dec_term -> dec_fact md_op .)
    COMP_EQUAL      reduce using rule 62 (dec_term -> dec_fact md_op .)
    COMP_NOTEQUAL   reduce using rule 62 (dec_term -> dec_fact md_op .)
    SEMICOLON       reduce using rule 62 (dec_term -> dec_fact md_op .)
    COMP_AND        reduce using rule 62 (dec_term -> dec_fact md_op .)
    COMP_OR         reduce using rule 62 (dec_term -> dec_fact md_op .)
    TIMES           reduce using rule 62 (dec_term -> dec_fact md_op .)
    DIVIDE          reduce using rule 62 (dec_term -> dec_fact md_op .)
    PLUS            reduce using rule 62 (dec_term -> dec_fact md_op .)
    MINUS           reduce using rule 62 (dec_term -> dec_fact md_op .)
    COMMA           reduce using rule 62 (dec_term -> dec_fact md_op .)
    RIGHTPAREN      reduce using rule 62 (dec_term -> dec_fact md_op .)
    RIGHTKEY        reduce using rule 62 (dec_term -> dec_fact md_op .)


state 172

    (63) md_op -> TIMES . dec_term
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_term                       shift and go to state 204
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143
    dec_exp_s                      shift and go to state 176

state 173

    (64) md_op -> DIVIDE . dec_term
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_term                       shift and go to state 205
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143
    dec_exp_s                      shift and go to state 176

state 174

    (65) md_op -> empty .

    COMP_LESS       reduce using rule 65 (md_op -> empty .)
    COMP_GREATER    reduce using rule 65 (md_op -> empty .)
    COMP_EQUAL      reduce using rule 65 (md_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 65 (md_op -> empty .)
    SEMICOLON       reduce using rule 65 (md_op -> empty .)
    COMP_AND        reduce using rule 65 (md_op -> empty .)
    COMP_OR         reduce using rule 65 (md_op -> empty .)
    TIMES           reduce using rule 65 (md_op -> empty .)
    DIVIDE          reduce using rule 65 (md_op -> empty .)
    PLUS            reduce using rule 65 (md_op -> empty .)
    MINUS           reduce using rule 65 (md_op -> empty .)
    COMMA           reduce using rule 65 (md_op -> empty .)
    RIGHTPAREN      reduce using rule 65 (md_op -> empty .)
    RIGHTKEY        reduce using rule 65 (md_op -> empty .)


state 175

    (69) hyper_call -> LEFTPAREN h_exp . RIGHTPAREN
    (68) hyper_call -> h_exp .

  ! shift/reduce conflict for RIGHTPAREN resolved as shift
    RIGHTPAREN      shift and go to state 206
    COMP_LESS       reduce using rule 68 (hyper_call -> h_exp .)
    COMP_GREATER    reduce using rule 68 (hyper_call -> h_exp .)
    COMP_EQUAL      reduce using rule 68 (hyper_call -> h_exp .)
    COMP_NOTEQUAL   reduce using rule 68 (hyper_call -> h_exp .)
    COMP_AND        reduce using rule 68 (hyper_call -> h_exp .)
    COMP_OR         reduce using rule 68 (hyper_call -> h_exp .)
    TIMES           reduce using rule 68 (hyper_call -> h_exp .)
    DIVIDE          reduce using rule 68 (hyper_call -> h_exp .)
    PLUS            reduce using rule 68 (hyper_call -> h_exp .)
    MINUS           reduce using rule 68 (hyper_call -> h_exp .)

  ! RIGHTPAREN      [ reduce using rule 68 (hyper_call -> h_exp .) ]


state 176

    (74) s_exp -> dec_exp_s . comp_op
    (75) comp_op -> . COMP_LESS s_exp
    (76) comp_op -> . COMP_GREATER s_exp
    (77) comp_op -> . COMP_EQUAL s_exp
    (78) comp_op -> . COMP_NOTEQUAL s_exp
    (79) comp_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GREATER resolved as shift
  ! shift/reduce conflict for COMP_EQUAL resolved as shift
  ! shift/reduce conflict for COMP_NOTEQUAL resolved as shift
    COMP_LESS       shift and go to state 162
    COMP_GREATER    shift and go to state 163
    COMP_EQUAL      shift and go to state 164
    COMP_NOTEQUAL   shift and go to state 165
    SEMICOLON       reduce using rule 116 (empty -> .)
    COMP_AND        reduce using rule 116 (empty -> .)
    COMP_OR         reduce using rule 116 (empty -> .)
    TIMES           reduce using rule 116 (empty -> .)
    DIVIDE          reduce using rule 116 (empty -> .)
    PLUS            reduce using rule 116 (empty -> .)
    MINUS           reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    RIGHTPAREN      reduce using rule 116 (empty -> .)
    RIGHTKEY        reduce using rule 116 (empty -> .)

  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]

    comp_op                        shift and go to state 161
    empty                          shift and go to state 166

state 177

    (90) dec_call_exp -> ID LEFTPAREN . call_pos RIGHTPAREN
    (91) call_pos -> . call
    (92) call_pos -> . empty
    (93) call -> . dec_exp call_more
    (116) empty -> .
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    RIGHTPAREN      reduce using rule 116 (empty -> .)
    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    call_pos                       shift and go to state 207
    call                           shift and go to state 147
    empty                          shift and go to state 148
    dec_exp                        shift and go to state 149
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 178

    (70) h_exp -> s_exp ao_op .

    COMP_LESS       reduce using rule 70 (h_exp -> s_exp ao_op .)
    COMP_GREATER    reduce using rule 70 (h_exp -> s_exp ao_op .)
    COMP_EQUAL      reduce using rule 70 (h_exp -> s_exp ao_op .)
    COMP_NOTEQUAL   reduce using rule 70 (h_exp -> s_exp ao_op .)
    SEMICOLON       reduce using rule 70 (h_exp -> s_exp ao_op .)
    COMP_AND        reduce using rule 70 (h_exp -> s_exp ao_op .)
    COMP_OR         reduce using rule 70 (h_exp -> s_exp ao_op .)
    TIMES           reduce using rule 70 (h_exp -> s_exp ao_op .)
    DIVIDE          reduce using rule 70 (h_exp -> s_exp ao_op .)
    PLUS            reduce using rule 70 (h_exp -> s_exp ao_op .)
    MINUS           reduce using rule 70 (h_exp -> s_exp ao_op .)
    COMMA           reduce using rule 70 (h_exp -> s_exp ao_op .)
    RIGHTPAREN      reduce using rule 70 (h_exp -> s_exp ao_op .)
    RIGHTKEY        reduce using rule 70 (h_exp -> s_exp ao_op .)


state 179

    (71) ao_op -> COMP_AND . h_exp
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    h_exp                          shift and go to state 208
    s_exp                          shift and go to state 143
    dec_exp_s                      shift and go to state 176
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136

state 180

    (72) ao_op -> COMP_OR . h_exp
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    h_exp                          shift and go to state 209
    s_exp                          shift and go to state 143
    dec_exp_s                      shift and go to state 176
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136

state 181

    (73) ao_op -> empty .

    COMP_LESS       reduce using rule 73 (ao_op -> empty .)
    COMP_GREATER    reduce using rule 73 (ao_op -> empty .)
    COMP_EQUAL      reduce using rule 73 (ao_op -> empty .)
    COMP_NOTEQUAL   reduce using rule 73 (ao_op -> empty .)
    SEMICOLON       reduce using rule 73 (ao_op -> empty .)
    COMP_AND        reduce using rule 73 (ao_op -> empty .)
    COMP_OR         reduce using rule 73 (ao_op -> empty .)
    TIMES           reduce using rule 73 (ao_op -> empty .)
    DIVIDE          reduce using rule 73 (ao_op -> empty .)
    PLUS            reduce using rule 73 (ao_op -> empty .)
    MINUS           reduce using rule 73 (ao_op -> empty .)
    COMMA           reduce using rule 73 (ao_op -> empty .)
    RIGHTPAREN      reduce using rule 73 (ao_op -> empty .)
    RIGHTKEY        reduce using rule 73 (ao_op -> empty .)


state 182

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC . COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON

    COLON           shift and go to state 210


state 183

    (33) fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .

    FUN             reduce using rule 33 (fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .)
    CLASS           reduce using rule 33 (fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .)
    MAIN            reduce using rule 33 (fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .)
    PUBLIC          reduce using rule 33 (fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 33 (fun -> FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET .)


state 184

    (89) dec_call -> ID LEFTPAREN call_pos RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 211


state 185

    (93) call -> dec_exp call_more .

    RIGHTPAREN      reduce using rule 93 (call -> dec_exp call_more .)


state 186

    (94) call_more -> COMMA . call
    (93) call -> . dec_exp call_more
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    call                           shift and go to state 212
    dec_exp                        shift and go to state 149
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 187

    (95) call_more -> empty .

    RIGHTPAREN      reduce using rule 95 (call_more -> empty .)


state 188

    (105) dec_method -> ID DOT ID LEFTPAREN . dec_exp_method RIGHTPAREN SEMICOLON
    (60) dec_exp_method -> . dec_exp_s
    (61) dec_exp_method -> . empty
    (56) dec_exp_s -> . dec_term pm_op
    (116) empty -> .
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    RIGHTPAREN      reduce using rule 116 (empty -> .)
    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp_method                 shift and go to state 213
    dec_exp_s                      shift and go to state 128
    empty                          shift and go to state 129
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 189

    (113) var_id -> ID LEFTKEY dec_exp RIGHTKEY .
    (114) var_id -> ID LEFTKEY dec_exp RIGHTKEY . LEFTKEY dec_exp RIGHTKEY

    COMP_EQUAL      reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    COMP_LESS       reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    COMP_GREATER    reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    COMP_NOTEQUAL   reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    SEMICOLON       reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    COMP_AND        reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    COMP_OR         reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    TIMES           reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    DIVIDE          reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    PLUS            reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    MINUS           reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    COMMA           reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    RIGHTPAREN      reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    RIGHTKEY        reduce using rule 113 (var_id -> ID LEFTKEY dec_exp RIGHTKEY .)
    LEFTKEY         shift and go to state 214


state 190

    (88) dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .

    ID              reduce using rule 88 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    INCO            reduce using rule 88 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    OUTCO           reduce using rule 88 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    IF              reduce using rule 88 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    WHILE           reduce using rule 88 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    RETURN          reduce using rule 88 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)
    RIGHTBRACKET    reduce using rule 88 (dec_assign -> var_id COMP_EQUAL dec_exp SEMICOLON .)


state 191

    (96) dec_read -> INCO LEFTPAREN var_id RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 215


state 192

    (97) dec_write -> OUTCO LEFTPAREN write RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 216


state 193

    (98) write -> dec_exp write_more .

    RIGHTPAREN      reduce using rule 98 (write -> dec_exp write_more .)


state 194

    (99) write_more -> COMMA . write
    (98) write -> . dec_exp write_more
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    write                          shift and go to state 217
    dec_exp                        shift and go to state 157
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 195

    (100) write_more -> empty .

    RIGHTPAREN      reduce using rule 100 (write_more -> empty .)


state 196

    (101) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN . LEFTBRACKET dec_block RIGHTBRACKET dec_else

    LEFTBRACKET     shift and go to state 218


state 197

    (104) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN . LEFTBRACKET dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 219


state 198

    (75) comp_op -> COMP_LESS s_exp .
    (70) h_exp -> s_exp . ao_op
    (71) ao_op -> . COMP_AND h_exp
    (72) ao_op -> . COMP_OR h_exp
    (73) ao_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for COMP_LESS resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 75 (comp_op -> COMP_LESS s_exp .)
    COMP_LESS       reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    COMP_GREATER    reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    COMP_EQUAL      reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    COMP_NOTEQUAL   reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    SEMICOLON       reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    TIMES           reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    DIVIDE          reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    PLUS            reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    MINUS           reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    RIGHTPAREN      reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    COMMA           reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    RIGHTKEY        reduce using rule 75 (comp_op -> COMP_LESS s_exp .)
    COMP_AND        shift and go to state 179
    COMP_OR         shift and go to state 180

  ! COMP_AND        [ reduce using rule 75 (comp_op -> COMP_LESS s_exp .) ]
  ! COMP_OR         [ reduce using rule 75 (comp_op -> COMP_LESS s_exp .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    ao_op                          shift and go to state 178
    empty                          shift and go to state 181

state 199

    (76) comp_op -> COMP_GREATER s_exp .
    (70) h_exp -> s_exp . ao_op
    (71) ao_op -> . COMP_AND h_exp
    (72) ao_op -> . COMP_OR h_exp
    (73) ao_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for COMP_LESS resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 76 (comp_op -> COMP_GREATER s_exp .)
    COMP_LESS       reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    COMP_GREATER    reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    COMP_EQUAL      reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    COMP_NOTEQUAL   reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    SEMICOLON       reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    TIMES           reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    DIVIDE          reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    PLUS            reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    MINUS           reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    RIGHTPAREN      reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    COMMA           reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    RIGHTKEY        reduce using rule 76 (comp_op -> COMP_GREATER s_exp .)
    COMP_AND        shift and go to state 179
    COMP_OR         shift and go to state 180

  ! COMP_AND        [ reduce using rule 76 (comp_op -> COMP_GREATER s_exp .) ]
  ! COMP_OR         [ reduce using rule 76 (comp_op -> COMP_GREATER s_exp .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    ao_op                          shift and go to state 178
    empty                          shift and go to state 181

state 200

    (77) comp_op -> COMP_EQUAL s_exp .
    (70) h_exp -> s_exp . ao_op
    (71) ao_op -> . COMP_AND h_exp
    (72) ao_op -> . COMP_OR h_exp
    (73) ao_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for COMP_LESS resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    COMP_LESS       reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    COMP_GREATER    reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    COMP_EQUAL      reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    COMP_NOTEQUAL   reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    SEMICOLON       reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    TIMES           reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    DIVIDE          reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    PLUS            reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    MINUS           reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    RIGHTPAREN      reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    COMMA           reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    RIGHTKEY        reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .)
    COMP_AND        shift and go to state 179
    COMP_OR         shift and go to state 180

  ! COMP_AND        [ reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .) ]
  ! COMP_OR         [ reduce using rule 77 (comp_op -> COMP_EQUAL s_exp .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    ao_op                          shift and go to state 178
    empty                          shift and go to state 181

state 201

    (78) comp_op -> COMP_NOTEQUAL s_exp .
    (70) h_exp -> s_exp . ao_op
    (71) ao_op -> . COMP_AND h_exp
    (72) ao_op -> . COMP_OR h_exp
    (73) ao_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for COMP_LESS resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! shift/reduce conflict for COMP_AND resolved as shift
  ! shift/reduce conflict for COMP_OR resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    COMP_LESS       reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    COMP_GREATER    reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    COMP_EQUAL      reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    COMP_NOTEQUAL   reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    SEMICOLON       reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    TIMES           reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    DIVIDE          reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    PLUS            reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    MINUS           reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    RIGHTPAREN      reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    COMMA           reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    RIGHTKEY        reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .)
    COMP_AND        shift and go to state 179
    COMP_OR         shift and go to state 180

  ! COMP_AND        [ reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .) ]
  ! COMP_OR         [ reduce using rule 78 (comp_op -> COMP_NOTEQUAL s_exp .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    ao_op                          shift and go to state 178
    empty                          shift and go to state 181

state 202

    (57) pm_op -> PLUS dec_exp_s .
    (74) s_exp -> dec_exp_s . comp_op
    (75) comp_op -> . COMP_LESS s_exp
    (76) comp_op -> . COMP_GREATER s_exp
    (77) comp_op -> . COMP_EQUAL s_exp
    (78) comp_op -> . COMP_NOTEQUAL s_exp
    (79) comp_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GREATER resolved as shift
  ! shift/reduce conflict for COMP_EQUAL resolved as shift
  ! shift/reduce conflict for COMP_NOTEQUAL resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GREATER resolved as shift
  ! shift/reduce conflict for COMP_EQUAL resolved as shift
  ! shift/reduce conflict for COMP_NOTEQUAL resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for COMP_AND resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for COMP_OR resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for TIMES resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for PLUS resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for MINUS resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for COMMA resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 57 (pm_op -> PLUS dec_exp_s .)
    SEMICOLON       reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    COMP_AND        reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    COMP_OR         reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    TIMES           reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    DIVIDE          reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    PLUS            reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    MINUS           reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    COMMA           reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    RIGHTPAREN      reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    RIGHTKEY        reduce using rule 57 (pm_op -> PLUS dec_exp_s .)
    COMP_LESS       shift and go to state 162
    COMP_GREATER    shift and go to state 163
    COMP_EQUAL      shift and go to state 164
    COMP_NOTEQUAL   shift and go to state 165

  ! COMP_LESS       [ reduce using rule 57 (pm_op -> PLUS dec_exp_s .) ]
  ! COMP_GREATER    [ reduce using rule 57 (pm_op -> PLUS dec_exp_s .) ]
  ! COMP_EQUAL      [ reduce using rule 57 (pm_op -> PLUS dec_exp_s .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 57 (pm_op -> PLUS dec_exp_s .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    comp_op                        shift and go to state 161
    empty                          shift and go to state 166

state 203

    (58) pm_op -> MINUS dec_exp_s .
    (74) s_exp -> dec_exp_s . comp_op
    (75) comp_op -> . COMP_LESS s_exp
    (76) comp_op -> . COMP_GREATER s_exp
    (77) comp_op -> . COMP_EQUAL s_exp
    (78) comp_op -> . COMP_NOTEQUAL s_exp
    (79) comp_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GREATER resolved as shift
  ! shift/reduce conflict for COMP_EQUAL resolved as shift
  ! shift/reduce conflict for COMP_NOTEQUAL resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GREATER resolved as shift
  ! shift/reduce conflict for COMP_EQUAL resolved as shift
  ! shift/reduce conflict for COMP_NOTEQUAL resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for COMP_AND resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for COMP_OR resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for TIMES resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for PLUS resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for MINUS resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for COMMA resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 58 (pm_op -> MINUS dec_exp_s .)
    SEMICOLON       reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    COMP_AND        reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    COMP_OR         reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    TIMES           reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    DIVIDE          reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    PLUS            reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    MINUS           reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    COMMA           reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    RIGHTPAREN      reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    RIGHTKEY        reduce using rule 58 (pm_op -> MINUS dec_exp_s .)
    COMP_LESS       shift and go to state 162
    COMP_GREATER    shift and go to state 163
    COMP_EQUAL      shift and go to state 164
    COMP_NOTEQUAL   shift and go to state 165

  ! COMP_LESS       [ reduce using rule 58 (pm_op -> MINUS dec_exp_s .) ]
  ! COMP_GREATER    [ reduce using rule 58 (pm_op -> MINUS dec_exp_s .) ]
  ! COMP_EQUAL      [ reduce using rule 58 (pm_op -> MINUS dec_exp_s .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 58 (pm_op -> MINUS dec_exp_s .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    comp_op                        shift and go to state 161
    empty                          shift and go to state 166

state 204

    (63) md_op -> TIMES dec_term .
    (56) dec_exp_s -> dec_term . pm_op
    (57) pm_op -> . PLUS dec_exp_s
    (58) pm_op -> . MINUS dec_exp_s
    (59) pm_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for COMP_LESS resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for COMP_AND resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for COMP_OR resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for TIMES resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 63 (md_op -> TIMES dec_term .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 63 (md_op -> TIMES dec_term .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 63 (md_op -> TIMES dec_term .)
    COMP_LESS       reduce using rule 63 (md_op -> TIMES dec_term .)
    COMP_GREATER    reduce using rule 63 (md_op -> TIMES dec_term .)
    COMP_EQUAL      reduce using rule 63 (md_op -> TIMES dec_term .)
    COMP_NOTEQUAL   reduce using rule 63 (md_op -> TIMES dec_term .)
    SEMICOLON       reduce using rule 63 (md_op -> TIMES dec_term .)
    COMP_AND        reduce using rule 63 (md_op -> TIMES dec_term .)
    COMP_OR         reduce using rule 63 (md_op -> TIMES dec_term .)
    TIMES           reduce using rule 63 (md_op -> TIMES dec_term .)
    DIVIDE          reduce using rule 63 (md_op -> TIMES dec_term .)
    COMMA           reduce using rule 63 (md_op -> TIMES dec_term .)
    RIGHTPAREN      reduce using rule 63 (md_op -> TIMES dec_term .)
    RIGHTKEY        reduce using rule 63 (md_op -> TIMES dec_term .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169

  ! PLUS            [ reduce using rule 63 (md_op -> TIMES dec_term .) ]
  ! MINUS           [ reduce using rule 63 (md_op -> TIMES dec_term .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    pm_op                          shift and go to state 167
    empty                          shift and go to state 170

state 205

    (64) md_op -> DIVIDE dec_term .
    (56) dec_exp_s -> dec_term . pm_op
    (57) pm_op -> . PLUS dec_exp_s
    (58) pm_op -> . MINUS dec_exp_s
    (59) pm_op -> . empty
    (116) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for COMP_LESS resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for COMP_AND resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for COMP_OR resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for TIMES resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 64 (md_op -> DIVIDE dec_term .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 64 (md_op -> DIVIDE dec_term .)
    COMP_LESS       reduce using rule 64 (md_op -> DIVIDE dec_term .)
    COMP_GREATER    reduce using rule 64 (md_op -> DIVIDE dec_term .)
    COMP_EQUAL      reduce using rule 64 (md_op -> DIVIDE dec_term .)
    COMP_NOTEQUAL   reduce using rule 64 (md_op -> DIVIDE dec_term .)
    SEMICOLON       reduce using rule 64 (md_op -> DIVIDE dec_term .)
    COMP_AND        reduce using rule 64 (md_op -> DIVIDE dec_term .)
    COMP_OR         reduce using rule 64 (md_op -> DIVIDE dec_term .)
    TIMES           reduce using rule 64 (md_op -> DIVIDE dec_term .)
    DIVIDE          reduce using rule 64 (md_op -> DIVIDE dec_term .)
    COMMA           reduce using rule 64 (md_op -> DIVIDE dec_term .)
    RIGHTPAREN      reduce using rule 64 (md_op -> DIVIDE dec_term .)
    RIGHTKEY        reduce using rule 64 (md_op -> DIVIDE dec_term .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169

  ! PLUS            [ reduce using rule 64 (md_op -> DIVIDE dec_term .) ]
  ! MINUS           [ reduce using rule 64 (md_op -> DIVIDE dec_term .) ]
  ! COMP_LESS       [ reduce using rule 116 (empty -> .) ]
  ! COMP_GREATER    [ reduce using rule 116 (empty -> .) ]
  ! COMP_EQUAL      [ reduce using rule 116 (empty -> .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 116 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (empty -> .) ]
  ! COMP_AND        [ reduce using rule 116 (empty -> .) ]
  ! COMP_OR         [ reduce using rule 116 (empty -> .) ]
  ! TIMES           [ reduce using rule 116 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 116 (empty -> .) ]
  ! PLUS            [ reduce using rule 116 (empty -> .) ]
  ! MINUS           [ reduce using rule 116 (empty -> .) ]
  ! COMMA           [ reduce using rule 116 (empty -> .) ]
  ! RIGHTPAREN      [ reduce using rule 116 (empty -> .) ]
  ! RIGHTKEY        [ reduce using rule 116 (empty -> .) ]

    pm_op                          shift and go to state 167
    empty                          shift and go to state 170

state 206

    (69) hyper_call -> LEFTPAREN h_exp RIGHTPAREN .

    COMP_LESS       reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_GREATER    reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_EQUAL      reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_NOTEQUAL   reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    SEMICOLON       reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_AND        reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    COMP_OR         reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    TIMES           reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    DIVIDE          reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    PLUS            reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    MINUS           reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    COMMA           reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)
    RIGHTKEY        reduce using rule 69 (hyper_call -> LEFTPAREN h_exp RIGHTPAREN .)


state 207

    (90) dec_call_exp -> ID LEFTPAREN call_pos . RIGHTPAREN

    RIGHTPAREN      shift and go to state 220


state 208

    (71) ao_op -> COMP_AND h_exp .
    (68) hyper_call -> h_exp .

  ! reduce/reduce conflict for COMP_LESS resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_AND resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_OR resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 68 (hyper_call -> h_exp .)
    COMP_LESS       reduce using rule 68 (hyper_call -> h_exp .)
    COMP_GREATER    reduce using rule 68 (hyper_call -> h_exp .)
    COMP_EQUAL      reduce using rule 68 (hyper_call -> h_exp .)
    COMP_NOTEQUAL   reduce using rule 68 (hyper_call -> h_exp .)
    SEMICOLON       reduce using rule 68 (hyper_call -> h_exp .)
    COMP_AND        reduce using rule 68 (hyper_call -> h_exp .)
    COMP_OR         reduce using rule 68 (hyper_call -> h_exp .)
    TIMES           reduce using rule 68 (hyper_call -> h_exp .)
    DIVIDE          reduce using rule 68 (hyper_call -> h_exp .)
    PLUS            reduce using rule 68 (hyper_call -> h_exp .)
    MINUS           reduce using rule 68 (hyper_call -> h_exp .)
    COMMA           reduce using rule 68 (hyper_call -> h_exp .)
    RIGHTPAREN      reduce using rule 68 (hyper_call -> h_exp .)
    RIGHTKEY        reduce using rule 68 (hyper_call -> h_exp .)

  ! COMP_LESS       [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! COMP_GREATER    [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! COMP_EQUAL      [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! SEMICOLON       [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! COMP_AND        [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! COMP_OR         [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! TIMES           [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! DIVIDE          [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! PLUS            [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! MINUS           [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! COMMA           [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! RIGHTPAREN      [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]
  ! RIGHTKEY        [ reduce using rule 71 (ao_op -> COMP_AND h_exp .) ]


state 209

    (72) ao_op -> COMP_OR h_exp .
    (68) hyper_call -> h_exp .

  ! reduce/reduce conflict for COMP_LESS resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_GREATER resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_EQUAL resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_NOTEQUAL resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_AND resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMP_OR resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 68 (hyper_call -> h_exp .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 68 (hyper_call -> h_exp .)
    COMP_LESS       reduce using rule 68 (hyper_call -> h_exp .)
    COMP_GREATER    reduce using rule 68 (hyper_call -> h_exp .)
    COMP_EQUAL      reduce using rule 68 (hyper_call -> h_exp .)
    COMP_NOTEQUAL   reduce using rule 68 (hyper_call -> h_exp .)
    SEMICOLON       reduce using rule 68 (hyper_call -> h_exp .)
    COMP_AND        reduce using rule 68 (hyper_call -> h_exp .)
    COMP_OR         reduce using rule 68 (hyper_call -> h_exp .)
    TIMES           reduce using rule 68 (hyper_call -> h_exp .)
    DIVIDE          reduce using rule 68 (hyper_call -> h_exp .)
    PLUS            reduce using rule 68 (hyper_call -> h_exp .)
    MINUS           reduce using rule 68 (hyper_call -> h_exp .)
    COMMA           reduce using rule 68 (hyper_call -> h_exp .)
    RIGHTPAREN      reduce using rule 68 (hyper_call -> h_exp .)
    RIGHTKEY        reduce using rule 68 (hyper_call -> h_exp .)

  ! COMP_LESS       [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! COMP_GREATER    [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! COMP_EQUAL      [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! COMP_NOTEQUAL   [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! SEMICOLON       [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! COMP_AND        [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! COMP_OR         [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! TIMES           [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! DIVIDE          [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! PLUS            [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! MINUS           [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! COMMA           [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! RIGHTPAREN      [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]
  ! RIGHTKEY        [ reduce using rule 72 (ao_op -> COMP_OR h_exp .) ]


state 210

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON . dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON
    (2) dec_vars_mult -> . dec_vars_idk
    (3) dec_vars_mult -> . empty
    (4) dec_vars_idk -> . dec_vars dec_vars_more
    (116) empty -> .
    (7) dec_vars -> . VAR vars SEMICOLON

    FUN             reduce using rule 116 (empty -> .)
    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    VAR             shift and go to state 9

    dec_vars_mult                  shift and go to state 221
    dec_vars_idk                   shift and go to state 6
    empty                          shift and go to state 7
    dec_vars                       shift and go to state 8

state 211

    (89) dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .

    ID              reduce using rule 89 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 89 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 89 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 89 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 89 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 89 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 89 (dec_call -> ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON .)


state 212

    (94) call_more -> COMMA call .

    RIGHTPAREN      reduce using rule 94 (call_more -> COMMA call .)


state 213

    (105) dec_method -> ID DOT ID LEFTPAREN dec_exp_method . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 222


state 214

    (114) var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY . dec_exp RIGHTKEY
    (55) dec_exp -> . dec_exp_s
    (56) dec_exp_s -> . dec_term pm_op
    (62) dec_term -> . dec_fact md_op
    (66) dec_fact -> . var_cte
    (67) dec_fact -> . hyper_call
    (106) var_cte -> . var_id
    (107) var_cte -> . dec_call_exp
    (108) var_cte -> . var_const
    (68) hyper_call -> . h_exp
    (69) hyper_call -> . LEFTPAREN h_exp RIGHTPAREN
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY
    (90) dec_call_exp -> . ID LEFTPAREN call_pos RIGHTPAREN
    (109) var_const -> . CTEI
    (110) var_const -> . CTEF
    (111) var_const -> . CHAR_DEC
    (70) h_exp -> . s_exp ao_op
    (74) s_exp -> . dec_exp_s comp_op

    LEFTPAREN       shift and go to state 138
    ID              shift and go to state 139
    CTEI            shift and go to state 140
    CTEF            shift and go to state 141
    CHAR_DEC        shift and go to state 142

    dec_exp                        shift and go to state 223
    dec_exp_s                      shift and go to state 150
    dec_term                       shift and go to state 130
    dec_fact                       shift and go to state 131
    var_cte                        shift and go to state 132
    hyper_call                     shift and go to state 133
    var_id                         shift and go to state 134
    dec_call_exp                   shift and go to state 135
    var_const                      shift and go to state 136
    h_exp                          shift and go to state 137
    s_exp                          shift and go to state 143

state 215

    (96) dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .

    ID              reduce using rule 96 (dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 96 (dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 96 (dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 96 (dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 96 (dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 96 (dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 96 (dec_read -> INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON .)


state 216

    (97) dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .

    ID              reduce using rule 97 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 97 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 97 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 97 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 97 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 97 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 97 (dec_write -> OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON .)


state 217

    (99) write_more -> COMMA write .

    RIGHTPAREN      reduce using rule 99 (write_more -> COMMA write .)


state 218

    (101) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET . dec_block RIGHTBRACKET dec_else
    (42) dec_block -> . block
    (43) dec_block -> . empty
    (44) block -> . statement block_more
    (116) empty -> .
    (47) statement -> . dec_assign
    (48) statement -> . dec_call
    (49) statement -> . dec_read
    (50) statement -> . dec_write
    (51) statement -> . dec_condition
    (52) statement -> . dec_cycle
    (53) statement -> . dec_method
    (54) statement -> . fun_return
    (88) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (89) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (96) dec_read -> . INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON
    (97) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (101) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (104) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (105) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (41) fun_return -> . RETURN dec_exp_method SEMICOLON
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    ID              shift and go to state 92
    INCO            shift and go to state 106
    OUTCO           shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    RETURN          shift and go to state 110

    dec_block                      shift and go to state 224
    block                          shift and go to state 94
    empty                          shift and go to state 95
    statement                      shift and go to state 96
    dec_assign                     shift and go to state 97
    dec_call                       shift and go to state 98
    dec_read                       shift and go to state 99
    dec_write                      shift and go to state 100
    dec_condition                  shift and go to state 101
    dec_cycle                      shift and go to state 102
    dec_method                     shift and go to state 103
    fun_return                     shift and go to state 104
    var_id                         shift and go to state 105

state 219

    (104) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET . dec_block RIGHTBRACKET
    (42) dec_block -> . block
    (43) dec_block -> . empty
    (44) block -> . statement block_more
    (116) empty -> .
    (47) statement -> . dec_assign
    (48) statement -> . dec_call
    (49) statement -> . dec_read
    (50) statement -> . dec_write
    (51) statement -> . dec_condition
    (52) statement -> . dec_cycle
    (53) statement -> . dec_method
    (54) statement -> . fun_return
    (88) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (89) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (96) dec_read -> . INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON
    (97) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (101) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (104) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (105) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (41) fun_return -> . RETURN dec_exp_method SEMICOLON
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    ID              shift and go to state 92
    INCO            shift and go to state 106
    OUTCO           shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    RETURN          shift and go to state 110

    dec_block                      shift and go to state 225
    block                          shift and go to state 94
    empty                          shift and go to state 95
    statement                      shift and go to state 96
    dec_assign                     shift and go to state 97
    dec_call                       shift and go to state 98
    dec_read                       shift and go to state 99
    dec_write                      shift and go to state 100
    dec_condition                  shift and go to state 101
    dec_cycle                      shift and go to state 102
    dec_method                     shift and go to state 103
    fun_return                     shift and go to state 104
    var_id                         shift and go to state 105

state 220

    (90) dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .

    COMP_LESS       reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    COMP_GREATER    reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    COMP_EQUAL      reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    COMP_NOTEQUAL   reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    SEMICOLON       reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    COMP_AND        reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    COMP_OR         reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    TIMES           reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    DIVIDE          reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    PLUS            reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    MINUS           reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    COMMA           reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)
    RIGHTKEY        reduce using rule 90 (dec_call_exp -> ID LEFTPAREN call_pos RIGHTPAREN .)


state 221

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult . dec_fun RIGHTBRACKET SEMICOLON
    (28) dec_fun -> . dec_fun_idk
    (29) dec_fun -> . empty
    (30) dec_fun_idk -> . fun dec_fun_more
    (116) empty -> .
    (33) fun -> . FUN fun_type fun_id LEFTPAREN param_pos RIGHTPAREN LEFTBRACKET dec_vars_mult dec_block RIGHTBRACKET

    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    FUN             shift and go to state 14

    dec_fun                        shift and go to state 226
    dec_fun_idk                    shift and go to state 11
    empty                          shift and go to state 12
    fun                            shift and go to state 13

state 222

    (105) dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 227


state 223

    (114) var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp . RIGHTKEY

    RIGHTKEY        shift and go to state 228


state 224

    (101) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block . RIGHTBRACKET dec_else

    RIGHTBRACKET    shift and go to state 229


state 225

    (104) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 230


state 226

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun . RIGHTBRACKET SEMICOLON

    RIGHTBRACKET    shift and go to state 231


state 227

    (105) dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .

    ID              reduce using rule 105 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    INCO            reduce using rule 105 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    OUTCO           reduce using rule 105 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 105 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 105 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 105 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)
    RIGHTBRACKET    reduce using rule 105 (dec_method -> ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON .)


state 228

    (114) var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .

    COMP_EQUAL      reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    COMP_LESS       reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    COMP_GREATER    reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    COMP_NOTEQUAL   reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    SEMICOLON       reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    COMP_AND        reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    COMP_OR         reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    TIMES           reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    DIVIDE          reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    PLUS            reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    MINUS           reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    COMMA           reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    RIGHTPAREN      reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)
    RIGHTKEY        reduce using rule 114 (var_id -> ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY .)


state 229

    (101) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET . dec_else
    (102) dec_else -> . ELSE LEFTBRACKET dec_block RIGHTBRACKET
    (103) dec_else -> . empty
    (116) empty -> .

    ELSE            shift and go to state 233
    ID              reduce using rule 116 (empty -> .)
    INCO            reduce using rule 116 (empty -> .)
    OUTCO           reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    RETURN          reduce using rule 116 (empty -> .)
    RIGHTBRACKET    reduce using rule 116 (empty -> .)

    dec_else                       shift and go to state 232
    empty                          shift and go to state 234

state 230

    (104) dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .

    ID              reduce using rule 104 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    INCO            reduce using rule 104 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    OUTCO           reduce using rule 104 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    IF              reduce using rule 104 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    WHILE           reduce using rule 104 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    RETURN          reduce using rule 104 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 104 (dec_cycle -> WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET .)


state 231

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 235


state 232

    (101) dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .

    ID              reduce using rule 101 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    INCO            reduce using rule 101 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    OUTCO           reduce using rule 101 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    IF              reduce using rule 101 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    WHILE           reduce using rule 101 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    RETURN          reduce using rule 101 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)
    RIGHTBRACKET    reduce using rule 101 (dec_condition -> IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else .)


state 233

    (102) dec_else -> ELSE . LEFTBRACKET dec_block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 236


state 234

    (103) dec_else -> empty .

    ID              reduce using rule 103 (dec_else -> empty .)
    INCO            reduce using rule 103 (dec_else -> empty .)
    OUTCO           reduce using rule 103 (dec_else -> empty .)
    IF              reduce using rule 103 (dec_else -> empty .)
    WHILE           reduce using rule 103 (dec_else -> empty .)
    RETURN          reduce using rule 103 (dec_else -> empty .)
    RIGHTBRACKET    reduce using rule 103 (dec_else -> empty .)


state 235

    (85) class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON .

    CLASS           reduce using rule 85 (class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON .)
    MAIN            reduce using rule 85 (class_body -> CLASS ID dec_inherit LEFTBRACKET PRIVATE COLON dec_vars_mult dec_fun PUBLIC COLON dec_vars_mult dec_fun RIGHTBRACKET SEMICOLON .)


state 236

    (102) dec_else -> ELSE LEFTBRACKET . dec_block RIGHTBRACKET
    (42) dec_block -> . block
    (43) dec_block -> . empty
    (44) block -> . statement block_more
    (116) empty -> .
    (47) statement -> . dec_assign
    (48) statement -> . dec_call
    (49) statement -> . dec_read
    (50) statement -> . dec_write
    (51) statement -> . dec_condition
    (52) statement -> . dec_cycle
    (53) statement -> . dec_method
    (54) statement -> . fun_return
    (88) dec_assign -> . var_id COMP_EQUAL dec_exp SEMICOLON
    (89) dec_call -> . ID LEFTPAREN call_pos RIGHTPAREN SEMICOLON
    (96) dec_read -> . INCO LEFTPAREN var_id RIGHTPAREN SEMICOLON
    (97) dec_write -> . OUTCO LEFTPAREN write RIGHTPAREN SEMICOLON
    (101) dec_condition -> . IF LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET dec_else
    (104) dec_cycle -> . WHILE LEFTPAREN dec_exp RIGHTPAREN LEFTBRACKET dec_block RIGHTBRACKET
    (105) dec_method -> . ID DOT ID LEFTPAREN dec_exp_method RIGHTPAREN SEMICOLON
    (41) fun_return -> . RETURN dec_exp_method SEMICOLON
    (112) var_id -> . ID
    (113) var_id -> . ID LEFTKEY dec_exp RIGHTKEY
    (114) var_id -> . ID LEFTKEY dec_exp RIGHTKEY LEFTKEY dec_exp RIGHTKEY

    RIGHTBRACKET    reduce using rule 116 (empty -> .)
    ID              shift and go to state 92
    INCO            shift and go to state 106
    OUTCO           shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    RETURN          shift and go to state 110

    dec_block                      shift and go to state 237
    block                          shift and go to state 94
    empty                          shift and go to state 95
    statement                      shift and go to state 96
    dec_assign                     shift and go to state 97
    dec_call                       shift and go to state 98
    dec_read                       shift and go to state 99
    dec_write                      shift and go to state 100
    dec_condition                  shift and go to state 101
    dec_cycle                      shift and go to state 102
    dec_method                     shift and go to state 103
    fun_return                     shift and go to state 104
    var_id                         shift and go to state 105

state 237

    (102) dec_else -> ELSE LEFTBRACKET dec_block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 238


state 238

    (102) dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .

    ID              reduce using rule 102 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    INCO            reduce using rule 102 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    OUTCO           reduce using rule 102 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    IF              reduce using rule 102 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    WHILE           reduce using rule 102 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    RETURN          reduce using rule 102 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 102 (dec_else -> ELSE LEFTBRACKET dec_block RIGHTBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMP_LESS in state 128 resolved as shift
WARNING: shift/reduce conflict for COMP_GREATER in state 128 resolved as shift
WARNING: shift/reduce conflict for COMP_EQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for COMP_NOTEQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 143 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 143 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 150 resolved as shift
WARNING: shift/reduce conflict for COMP_GREATER in state 150 resolved as shift
WARNING: shift/reduce conflict for COMP_EQUAL in state 150 resolved as shift
WARNING: shift/reduce conflict for COMP_NOTEQUAL in state 150 resolved as shift
WARNING: shift/reduce conflict for RIGHTPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 176 resolved as shift
WARNING: shift/reduce conflict for COMP_GREATER in state 176 resolved as shift
WARNING: shift/reduce conflict for COMP_EQUAL in state 176 resolved as shift
WARNING: shift/reduce conflict for COMP_NOTEQUAL in state 176 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 198 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 198 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 198 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 198 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 199 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 199 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 199 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 199 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 200 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 200 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 200 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 200 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 201 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 201 resolved as shift
WARNING: shift/reduce conflict for COMP_AND in state 201 resolved as shift
WARNING: shift/reduce conflict for COMP_OR in state 201 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_GREATER in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_NOTEQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_GREATER in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_NOTEQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 203 resolved as shift
WARNING: shift/reduce conflict for COMP_GREATER in state 203 resolved as shift
WARNING: shift/reduce conflict for COMP_EQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for COMP_NOTEQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 203 resolved as shift
WARNING: shift/reduce conflict for COMP_GREATER in state 203 resolved as shift
WARNING: shift/reduce conflict for COMP_EQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for COMP_NOTEQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 204 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 204 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 204 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 204 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 205 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 205 resolved as shift
WARNING: reduce/reduce conflict in state 128 resolved using rule (dec_exp_method -> dec_exp_s)
WARNING: rejected rule (empty -> <empty>) in state 128
WARNING: reduce/reduce conflict in state 150 resolved using rule (dec_exp -> dec_exp_s)
WARNING: rejected rule (empty -> <empty>) in state 150
WARNING: reduce/reduce conflict in state 198 resolved using rule (comp_op -> COMP_LESS s_exp)
WARNING: rejected rule (empty -> <empty>) in state 198
WARNING: reduce/reduce conflict in state 199 resolved using rule (comp_op -> COMP_GREATER s_exp)
WARNING: rejected rule (empty -> <empty>) in state 199
WARNING: reduce/reduce conflict in state 200 resolved using rule (comp_op -> COMP_EQUAL s_exp)
WARNING: rejected rule (empty -> <empty>) in state 200
WARNING: reduce/reduce conflict in state 201 resolved using rule (comp_op -> COMP_NOTEQUAL s_exp)
WARNING: rejected rule (empty -> <empty>) in state 201
WARNING: reduce/reduce conflict in state 202 resolved using rule (pm_op -> PLUS dec_exp_s)
WARNING: rejected rule (empty -> <empty>) in state 202
WARNING: reduce/reduce conflict in state 203 resolved using rule (pm_op -> MINUS dec_exp_s)
WARNING: rejected rule (empty -> <empty>) in state 203
WARNING: reduce/reduce conflict in state 204 resolved using rule (md_op -> TIMES dec_term)
WARNING: rejected rule (empty -> <empty>) in state 204
WARNING: reduce/reduce conflict in state 205 resolved using rule (md_op -> DIVIDE dec_term)
WARNING: rejected rule (empty -> <empty>) in state 205
WARNING: reduce/reduce conflict in state 208 resolved using rule (hyper_call -> h_exp)
WARNING: rejected rule (ao_op -> COMP_AND h_exp) in state 208
WARNING: reduce/reduce conflict in state 209 resolved using rule (hyper_call -> h_exp)
WARNING: rejected rule (ao_op -> COMP_OR h_exp) in state 209
WARNING: Rule (ao_op -> COMP_AND h_exp) is never reduced
WARNING: Rule (ao_op -> COMP_OR h_exp) is never reduced
